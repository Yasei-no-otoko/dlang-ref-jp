Ddoc

$(SPEC_S 条件コンパイル,

	$(P $(I Conditional compilation) とは、
	コンパイルするコードとしないコードを選択する過程のことを言います。
	（C や C++ では、条件コンパイラは、プリプロセッサの
	$(CODE #if) / $(CODE #else) / $(CODE #endif) によって実現されていました。）
	)

$(GRAMMAR
$(GNAME ConditionalDeclaration):
    $(GLINK Condition) $(GLINK CCDeclarationBlock)
    $(GLINK Condition) $(GLINK CCDeclarationBlock) $(B else) $(GLINK CCDeclarationBlock)
    $(GLINK Condition) $(B :) $(GLINK Declarations)

$(GNAME CCDeclarationBlock):
    $(GLINK2 declaration, Declaration)
    $(B {) $(GLINK Declarations) $(B })
    $(B { })

$(GNAME Declarations):
    $(GLINK2 declaration, Declaration)
    $(GLINK2 declaration, Declaration) $(I Declarations)

$(GNAME ConditionalStatement):
    $(GLINK Condition) $(GLINK2 statement, NoScopeNonEmptyStatement)
    $(GLINK Condition) $(GLINK2 statement, NoScopeNonEmptyStatement) $(B else) $(GLINK2 statement, NoScopeNonEmptyStatement)
)

	$(P $(GLINK Condition) が満たされた時に、その後ろの
	$(I CCDeclarationBlock) か $(I Statement) がコンパイルされます。
	条件が満たされなかったときは、$(CODE else) がもしあればその後ろの
	$(I CCDeclarationBlock) か $(I Statement) がコンパイルされます。
	)

	$(P 例えコンパイルされない $(I CCDeclarationBlock) や $(I Statement) であっても、
	文法的には正しいD言語のコードである必要があります。
	)

	$(P 新しいスコープは導入されません。
	例え $(I CCDeclarationBlock) や $(I Statement)
	が $(CODE { }) で囲まれていたとしてもです。
	)

	$(P $(I ConditionalDeclaration) と $(I ConditionalStatement)
	はネストすることが可能です。
	)

	$(P $(GLINK StaticAssert) は、
	コンパイル時にエラーを表示する機能です。
	条件コンパイルの分岐でエラーとしたい部分などに使います。
	)

	$(P $(I Condition) は以下の形式で記述します：
	)

$(GRAMMAR
$(GNAME Condition):
    $(GLINK VersionCondition)
    $(GLINK DebugCondition)
    $(GLINK StaticIfCondition)
)

<h2>$(LNAME2 version, version 条件)</h2>

$(GRAMMAR
$(GNAME VersionCondition):
    $(B version $(LPAREN)) $(GLINK2 lex, IntegerLiteral) $(B $(RPAREN))
    $(B version $(LPAREN)) $(I Identifier) $(B $(RPAREN))
$(V2
    $(B version $(LPAREN)) $(B unittest) $(B $(RPAREN)))
)

	$(P version は、
	一つのソースファイルで複数バージョンのモジュールを実装することを可能にします。
	)

	$(P $(I VersionCondition) 条件は、$(I IntegerLiteral)
	が現在の $(I バージョンレベル) 以上の時か、
	$(I Identifier) が現在の $(I バージョン識別子) にマッチしたときに満たされます。
	)

	$(P $(I バージョンレベル) と $(I バージョン識別子) は、
	コマンドラインの $(B -version) スイッチで指定するか、
	モジュールの中の $(GLINK VersionSpecification) で指定するか、
	コンパイラの定義済みバージョンであるかのいずれかです。
	)

	$(P デバッグ識別子は専用の名前空間を持つので、
	バージョン識別子をはじめとする他の識別子とは衝突しません。
	デバッグ識別子は書かれたモジュール内にのみ影響し、
	他にimportされたモジュールには影響しません。
	)

------
int k;
version (Demo) // デモ版ではこのブロックをコンパイルする
{ int i;
  int k;    // エラー。kが既に定義されている

  i = 3;
}
x = i;      // 上で定義された i を使用
------

------
version (X86)
{
  ... // カスタムのインラインアセンブラ版を実装
}
else
{
  ... // デフォルトの、遅い版
}
------

$(V2	$(P $(B version(unittest)) は、
	コードが単体テスト付きでコンパイルされている時 ($(B dmd) の $(D -unittest) のオプション) のみ有効になります。
	)
)

<h3>$(LNAME2 VersionSpecification, version 条件指定)</h3>

$(GRAMMAR
$(GNAME VersionSpecification):
    $(B version =) $(I Identifier) $(B ;)
    $(B version =) $(GLINK2 lex, IntegerLiteral) $(B ;)
)

	$(P バージョン条件指定を使うと、
	メジャーバージョン毎に導入したい機能の切り分けなどが簡単になります。例えば：
	)

------
version (ProfessionalEdition)
{
  version = FeatureA;
  version = FeatureB;
  version = FeatureC;
}
version (HomeEdition)
{
  version = FeatureA;
}
...
version (FeatureB)
{
  ... Feature B の実装 ...
}
------

	$(P バージョン識別子やバージョン番号の前方参照は、不正です：
	)

------
version (Foo)
{
  int x;
}
version = Foo;	// エラー、Foo は既に使用されている
------
	$(P $(I VersionSpecification) はモジュールスコープでのみ記述することができます)

	$(P Wversion条件はdebug条件に非常によく似ていますが、
	目的は全く異なります。
	debugはリリース版では取り除きたいデバッグ用の
	コードのためであるのに対して、
	version文は、
	同じソースから複数のリリース版を作るための機能です。
	)

	$(P 以下は、$(I full) バージョンと
	$(I demo) バージョンを区別する例です：)

------
class Foo {
  int a, b;

  version(full)
  {
    int extrafunctionality()
    {
      ...
      return 1;  // 発展的な機能のサポート
    }
  }
  else // demo
  {
    int extrafunctionality()
    {
      return 0;  // 発展的な機能はサポートされない
    }
  }
}
------

	versionへのパラメタによって、
	複数種類のバージョンをビルドできます：

------
version($(I n)) // バージョンレベル $(I n) 以上ならコードを追加
{
   ... version code ...
}

version($(I identifier)) // バージョン識別子が
                         // $(I identifier) ならコードを追加
{
   ... version code ...
}
------

	$(P これらは、あらかじめコマンドラインから 
	$(D -version=$(I n)) と $(D -version=$(I identifier)) でも指定できます。
	)


<h3><a name="PredefinedVersions">定義済みのバージョン識別子</a></h3>

	$(P 環境に関するいくつかのバージョン識別子は、
	一貫した使われ方をされるように、予め定義されています。
	バージョン識別子はその他の種類の識別子とは衝突しない、
	別の名前空間におかれています。
	定義済みバージョン識別子は、グローバルです。
	つまり、コンパイルやimportされる全てのモジュールに影響します。
	)

	$(TABLE2 定義済みバージョン識別子,
	$(TR $(TH バージョン識別子) $(TH 説明))
	$(TR $(TD $(B DigitalMars)) $(TD コンパイラは DMD (Digital Mars D) である))
	$(TR $(TD $(B GNU)) $(TD コンパイラは GDC (GNU D Compiler) である))
	$(TR $(TD $(B LDC)) $(TD コンパイラは LDC (LLVM D Compiler) である))
	$(TR $(TD $(B SDC)) $(TD コンパイラは SDC (Stupid D Compiler) である))
	$(TR $(TD $(B D_NET)) $(TD コンパイラは D.NET である))
	$(TR $(TD $(B Windows)) $(TD Microsoft Windows システム))
	$(TR $(TD $(B Win32)) $(TD Microsoft 32-bit Windows システム))
	$(TR $(TD $(B Win64)) $(TD Microsoft 64-bit Windows システム))
	$(TR $(TD $(B linux)) $(TD Linux システム))
	$(TR $(TD $(B OSX)) $(TD Mac OS X))
	$(TR $(TD $(B FreeBSD)) $(TD FreeBSD))
	$(TR $(TD $(B OpenBSD)) $(TD OpenBSD))
	$(TR $(TD $(B BSD)) $(TD そのほかの BSDs))
	$(TR $(TD $(B Solaris)) $(TD Solaris))
	$(TR $(TD $(B Posix)) $(TD 全ての POSIX システム (Linux, FreeBSD, OS X, Solaris, などを含む)))
	$(TR $(TD $(B AIX)) $(TD AIX))
	$(TR $(TD $(B SkyOS)) $(TD SkyOS))
	$(TR $(TD $(B SysV3)) $(TD System V Release 3))
	$(TR $(TD $(B SysV4)) $(TD System V Release 4))
	$(TR $(TD $(B Hurd)) $(TD GNU Hurd))
	$(TR $(TD $(B Android)) $(TD Android プラットフォーム))
	$(TR $(TD $(B Cygwin)) $(TD Cygwin 環境))
	$(TR $(TD $(B MinGW)) $(TD MinGW 環境))
	$(TR $(TD $(B X86)) $(TD Intel と AMD の 32-bit プロセッサ))
	$(TR $(TD $(B X86_64)) $(TD AMD と Intel の 64-bit プロセッサ))
	$(TR $(TD $(B ARM)) $(TD ARM (32-bit)))
	$(TR $(TD $(B PPC)) $(TD PowerPC, 32-bit))
	$(TR $(TD $(B PPC64)) $(TD PowerPC, 64-bit))
	$(TR $(TD $(B IA64)) $(TD Itanium (64-bit)))
	$(TR $(TD $(B MIPS)) $(TD MIPS, 32-bit))
	$(TR $(TD $(B MIPS64)) $(TD MIPS, 64-bit))
	$(TR $(TD $(B SPARC)) $(TD SPARC, 32-bit))
	$(TR $(TD $(B SPARC64)) $(TD SPARC, 64-bit))
	$(TR $(TD $(B S390)) $(TD System/390, 32-bit))
	$(TR $(TD $(B S390X)) $(TD System/390X, 64-bit))
	$(TR $(TD $(B HPPA)) $(TD HP PA-RISC, 32-bit))
	$(TR $(TD $(B HPPA64)) $(TD HP PA-RISC, 64-bit))
	$(TR $(TD $(B SH)) $(TD SuperH, 32-bit))
	$(TR $(TD $(B SH64)) $(TD SuperH, 64-bit))
	$(TR $(TD $(B Alpha)) $(TD Alpha))
	$(TR $(TD $(B LittleEndian)) $(TD バイト順序が、LSB-First))
	$(TR $(TD $(B BigEndian)) $(TD バイト順序が、MSB-First))
	$(TR $(TD $(B D_Coverage)) $(TD $(DPLLINK code_coverage.html, カバレッジ解析) 命令が (コマンドライン$(DPLLINK dmd-windows.html#switches, スイッチ) $(B -cov) により) 生成される))
	$(TR $(TD $(B D_Ddoc)) $(TD $(DDLINK ddoc, Embedded Documentation, Ddoc) ドキュメント化 (コマンドライン$(DPLLINK dmd-windows.html#switches, スイッチ) $(B -D)) の生成中))
	$(TR $(TD $(B D_InlineAsm_X86)) $(TD X86 $(DDLINK iasm, Inline Assembler, インラインアセンブラ) が実装されている))
	$(TR $(TD $(B D_InlineAsm_X86_64)) $(TD X86-64 $(DDLINK iasm, Inline Assembler, インラインアセンブラ) が実装されている))
	$(TR $(TD $(B D_LP64)) $(TD ポインタが64ビット (コマンドライン$(DPLLINK dmd-windows.html#switches, スイッチ) $(B -m64))))
	$(TR $(TD $(B D_PIC)) $(TD 位置独立コードが (コマンドライン$(DPLLINK dmd-windows.html#switches, スイッチ) $(B -fPIC) により) 生成される))
	$(V2 $(TR $(TD $(B D_SIMD)) $(TD $(DDLINK simd, simd, ベクトル演算拡張) (__vector と __simd) 対応)))
	$(V2 $(TR $(TD $(B D_Version2)) $(TD D バージョン 2 のコンパイラである)))
	$(V2 $(TR $(TD $(B unittest)) $(TD $(DDLINK unittest, Unit Tests, 単体テスト) が生成される (コマンドライン$(DPLLINK dmd-windows.html#switches, スイッチ) $(B -unittest)))))
	$(TR $(TD $(B none)) $(TD 決して定義されない。コードの一部を無効にするのに使用される))
	$(TR $(TD $(B all)) $(TD 常に定義される。$(B none) の反対として使用される))
	)

	$(P 以下の識別子は定義されますが、廃止される予定で非推奨です。
	)

	$(TABLE2 定義済みバージョン識別子,
	$(TR $(TH バージョン識別子) $(TH 説明))
	$(TR $(TD $(B darwin)) $(TD Darwin OS。代わりに $(B OSX) を使います))
	)

	$(P 新しい実装が出現した場合、他にも意味のある識別子があれば追加されるでしょう。
	)

	$(P D言語が、年を重ねるに従って発展していくのは不可避です。
	それゆえ、"D_" で始まるバージョン識別子は、
	D の新しい機能への対応や、
	規格への対応を示す識別子として予約されています。
	)

	$(P ここにあげた定義済みバージョン識別子は、
	コマンドラインやversion設定文で設定することは禁止されています。
	（これによって、例えば $(B Windows) と $(B linux)
	が同時に設定されているような事態を防止します。）
	)

	$(P コンパイラベンダ特有のバージョンは、
	そのベンダを示す識別子を接頭辞として、あらかじめ定義されます。
	例えば：
	)

------
version(DigitalMars_funky_extension)
{
    ...
}
------

	$(P 適切なバージョン識別子を適切な目的に使うことを心がけてください。
	例えば、ベンダIDはベンダ特有の機能を使うときに利用し、
	OSのIDはOS特有の機能を使うときにのみ利用する、
	などなど。
	)


<h2>$(LNAME2 debug, debug 条件)</h2>

$(GRAMMAR
$(GNAME DebugCondition):
    $(B debug)
    $(B debug $(LPAREN)) $(GLINK2 lex, IntegerLiteral) $(B $(RPAREN))
    $(B debug $(LPAREN)) $(I Identifier) $(B $(RPAREN))
)

	$(P 日常的にビルドされる２つのバージョンがあります。
	それは、リリースビルドとデバッグビルド。
	デバッグビルドは普通、
	余分なエラーチェックコードや、
	もろもろのテスト、pretty-printing用のコードなどを含んでいます。
	debug文の内容は、条件コンパイルされます。
	これは、
	Cでは $(CODE #ifdef DEBUG) / $(CODE #endif) で書いていたものの D 版です。
	)

	$(P コンパイラに $(B -debug) スイッチが投げられた時に、
	$(B debug) 条件が満たされます。
	)

	$(P $(B debug $(LPAREN)) $(I IntegerLiteral) $(B $(RPAREN)) 条件は、デバッグレベル
	が $(I IntegerLiteral)
	以上ならば条件が満たされたことになります。
	)

	$(P $(B debug $(LPAREN)) $(I Identifier) $(B $(RPAREN)) 条件は、デバッグ識別子が
	$(I Identifier) と一致すれば満たされます。
	)

------
class Foo {
  int a, b;
 debug:
  int flag;
}
------


<h3>debug 条件指定</h3>

$(GRAMMAR
$(GNAME DebugSpecification):
    $(B debug =) $(I Identifier) $(B ;)
    $(B debug =) $(GLINK2 lex, IntegerLiteral) $(B ;)
)

	$(P デバッグ識別子とデバッグレベルは、
	$(B -debug) コマンドラインスイッチか、 $(I DebugSpecification) で指定します。
	)

	$(P デバッグ条件指定は、書かれたモジュール内にのみ影響し、
	importされたモジュールには影響しません。デバッグ識別子は専用の名前空間を持つので、
	バージョン識別子をはじめとする
	他の識別子とは衝突しません。
	)

	$(P デバッグ条件指定の前方参照は、不正です：
	)

------
debug (foo) writefln("Foo");
debug = foo;	// エラー、fooは設定される前に使用されている
------

	$(P $(I DebugSpecification) はモジュールスコープでのみ記述できます。)

	$(P debugへのパラメタによって、
	複数種類のデバッグビルドを生成できます：
	)

------
debug($(GLINK2 lex, IntegerLiteral)) { }    // デバッグレベル $(GLINK2 lex, IntegerLiteral) 以上ならコードを追加
debug($(I identifier)) { } // デバッグ識別子が $(I identifier) ならコードを追加
------

	$(P これらは、あらかじめコマンドラインから
	$(D -debug=$(I n)) と $(D -debug=$(I identifier)) でも指定できます。
	)

<h2>$(LNAME2 staticif, static if 条件)</h2>

$(GRAMMAR
$(GNAME StaticIfCondition):
    $(B static if $(LPAREN)) $(ASSIGNEXPRESSION) $(B $(RPAREN))
)

	$(P $(ASSIGNEXPRESSION) はコンパイル時に評価され、
	暗黙にbool型に変換されます。
	評価結果が $(B true) なら条件成立で、
	$(B false) ならば非成立です。
	)

	$(P $(ASSIGNEXPRESSION) がbool型に変換できない型だったり、
	コンパイル時に値が決定できなかったりするとエラーになります。
	)

	$(P $(I StaticIfCondition) は
	モジュール、クラス、テンプレート、構造体、共用体、関数のスコープで使用できます。
	関数スコープで使われた場合は、
	$(ASSIGNEXPRESSION)
	で参照できるシンボルはその位置で普通に参照できるもの全てです。
	)

------
const int i = 3;
int j = 4;

$(B static if) (i == 3)	// ok, モジュールスコープ
    int x;

class C {
  const int k = 5;

  $(B static if) (i == 3) // ok
    int x;
  $(B else)
    long x;

  $(B static if) (j == 3) // エラー、j は定数ではない
    int y;

  $(B static if) (k == 5) // ok, k はカレントスコープの定数
    int z;
}

template INT(int i) {
  $(B static if) (i == 32)
    alias int INT;
  $(B else static if) (i == 16)
    alias short INT;
  $(B else)
    static assert(0); // 未サポート
}

INT!(32) a;  // a は int
INT!(16) b;  // b は short
INT!(17) c;  // エラー。static assert で止まる
------

	$(P $(I StaticIfConditional) の
	$(I IfStatement) との違いは次の通りです：
	)

	$(OL
	$(LI 文だけでなく、
	宣言を条件コンパイルすることも可能です。
	)
	$(LI たとえ $(B { }) が使われていても、
		新しいスコープは導入しません。
	)
	$(LI 非成立な条件式の中身のコードは、
		文法的にさえ正しければ、
		意味論的に正しい必要はありません。
	)
	$(LI コンパイル時に必ず評価可能です。
	)
	)


<h2>$(LNAME2 StaticAssert, static assert)</h2>

$(GRAMMAR
$(GNAME StaticAssert):
    $(B static assert $(LPAREN)) $(ASSIGNEXPRESSION) $(B $(RPAREN);)
    $(B static assert $(LPAREN)) $(ASSIGNEXPRESSION) $(B ,) $(ASSIGNEXPRESSION) $(B $(RPAREN);)
)

	$(P $(ASSIGNEXPRESSION) はコンパイル時に評価され、ブール値に変換されます。
	その値がtrueであれば、static assert は無視されます。
	false な場合、
	診断メッセージが出力され、コンパイルが失敗します。
	)

	$(P $(GLINK2 expression, AssertExpression) とは違い、 $(I StaticAssert) は、
	不成立の条件の中にあるのでなければ常にコンパイラによって評価、
	テストされます。
	)

------
void foo() {
  if (0)
  {
    assert(0);  // 決して引っ掛からない
    static assert(0); // 常に引っ掛かる
  }
  version (BAR)
  {
  }
  else
  {
    static assert(0); // BARが定義されていない限り引っ掛からない
  }
}
------

	$(P $(I StaticAssert) は主に、
	そのコードでサポートされていないコンパイル条件を示すために役に立ちます。
	)

	$(P オプションとして、$(ASSIGNEXPRESSION)
	には第二引数を指定できます。第二引数にはエラーに関する追加情報を文字列で入れるなどしておくと、
	エラーメッセージとして表示されるようになります。
	)
)

Macros:
	TITLE=条件コンパイル
	WIKI=Version
	CATEGORY_SPEC=$0

