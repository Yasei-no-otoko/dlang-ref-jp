Ddoc

$(SPEC_S 型,

$(SECTION2 基本データ型,

    $(TABLE2 基本データ型,
    $(THEAD 予約語, 説明, デフォルト初期値 ($(D .init)))
    $(TROW
        $(D void),
        型なし,
        $(D -)
    )
    $(TROW
        $(D bool),
        ブール値,
        $(D false)
    )
    $(TROW
        $(D byte),
        符号付き 8bit,
        $(D 0)
    )
    $(TROW
        $(D ubyte),
        符号なし 8bit,
        $(D 0)
    )
    $(TROW
        $(D short),
        符号付き 16bit,
        $(D 0)
    )
    $(TROW
        $(D ushort),
        符号なし 16bit,
        $(D 0)
    )
    $(TROW
        $(D int),
        符号付き 32bit,
        $(D 0)
    )
    $(TROW
        $(D uint),
        符号なし 32bit,
        $(D 0)
    )
    $(TROW
        $(D long),
        符号付き 64bit,
        $(D 0L)
    )
    $(TROW
        $(D ulong),
        符号なし 64bit,
        $(D 0L)
    )
    $(TROW
        $(D cent),
        符号付き 128bit (将来のために予約),
        $(D 0)
    )
    $(TROW
        $(D ucent),
        符号なし 128bit (将来のために予約),
        $(D 0)
    )
    $(TROW
        $(D float),
        32bit 浮動小数点数,
        $(D float.nan)
    )
    $(TROW
        $(D double),
        64bit 浮動小数点数,
        $(D double.nan)
    )
    $(TROW
        $(D real),
        ハードウェアのサポートする最大の浮動小数点数
        ($(B 実装メモ:) x86のCPUでは80bit)
        または double のサイズの大きい方,
        $(D real.nan)
    )
    $(TROW
        $(D ifloat),
        float の虚数型,
        $(D float.nan * 1.0i)
    )
    $(TROW
        $(D idouble),
        double の虚数型,
        $(D double.nan * 1.0i)
    )
    $(TROW
        $(D ireal),
        real の虚数型,
        $(D real.nan * 1.0i)
    )
    $(TROW
        $(D cfloat),
        2つのfloatで表現された複素数,
        $(D float.nan + float.nan * 1.0i)
    )
    $(TROW
        $(D cdouble),
        double の複素数,
        $(D double.nan + double.nan * 1.0i)
    )
    $(TROW
        $(D creal),
        real の複素数,
        $(D real.nan + real.nan * 1.0i)
    )
    $(TROW
        $(D char),
        符号なし 8 bit UTF-8 文字,
        $(D 0xFF)
    )
    $(TROW
        $(D wchar),
        符号なし 16bit UTF-16 文字,
        $(D 0xFFFF)
    )
    $(TROW
        $(D dchar),
        符号なし 32bit UTF-32 文字,
        $(D 0x0000FFFF)
    )
    )
)


$(SECTION2 派生データ型,

    $(UL
    $(LI ポインタ)
    $(LI 配列)
    $(LI 連想配列)
    $(LI 関数)
    $(LI デリゲート)
    )

    $(P $(DDSUBLINK arrays, strings, $(I 文字列)) は配列の一種です。)
)

$(SECTION2 ユーザー定義型,

    $(UL
    $(LI alias)
    $(LI enum)
    $(LI struct)
    $(LI union)
    $(LI class)
    $(V1 $(LI typedef))
    )
)


$(SECTION2 ベース型,

    $(P enum の $(I base type) とは、そのenumの基となる型のことです:)

---
enum E : T { ... }  // T は E の $(I base type)
---

$(V1
    $(P typedef の $(I base type) とは、そのtypedefの基となる型のことです:)

---
typedef T U;  // T は U の $(I base type)
---
)
)


$(SECTION2 ポインタ変換,

    $(P ポインタを非ポインタにキャストしたり、その逆をすることはDでは許可されています。
	しかしながら、ガベージコレクタによって割り当てられたデータを指すポインタに対しては、
	この操作を行ってはいけません。
    )
)

$(SECTION2 暗黙の変換,

    $(P 要に応じて自動的に型を変換するために、
	暗黙の変換が行われます。
    )

    $(P $(V1 typedef や) enum型は
	暗黙のうちにベース型へ変換できますが、
	逆向きは明示的な指定が必要です。
    $(V1 リテラルはtypedefに暗黙変換されます。)
    例えば
    )

-------------------
int i;
$(V1 typedef int myint;
myint m;
i = m;             // OK
m = i;             // エラー
m = cast(myint)i;  // OK
m = 3;             // OK)
enum Foo { E }
Foo f;
i = f;           // OK
f = i;           // エラー
f = cast(Foo)i;  // OK
f = 0;           // エラー
f = Foo.E;       // OK
-------------------
)


$(SECTION2 整数の昇格,

    $(P 整数の昇格とは、以下の型の間の変換です：
    )

    $(TABLE2 整数の昇格,
    $(TR
    $(TH 変換前)
    $(TH 変換後)
    )
    $(TR
    $(TD bool)
    $(TD int)
    )
    $(TR
    $(TD byte)
    $(TD int)
    )
    $(TR
    $(TD ubyte)
    $(TD int)
    )
    $(TR
    $(TD short)
    $(TD int)
    )
    $(TR
    $(TD ushort)
    $(TD int)
    )
    $(TR
    $(TD char)
    $(TD int)
    )
    $(TR
    $(TD wchar)
    $(TD int)
    )
    $(TR
    $(TD dchar)
    $(TD uint)
    )
    )

    $(P $(V1 typedef や)
	enum 型でベース型が左の列のものは、
	右の列の型へと変換されます。
    )
)


$(SECTION2 算術演算時の変換,

    $(P 算術二項演算子のオペランドは、
	演算の前に共通の型へと変換されます。
	オペランドは、
	変換前に既に算術演算可能な型である必要があります。
	ベース型を見ながら、次の順序で変換ルールが適用されます：
    )

    $(OL
    $(LI オペランドの一方がreal型なら、
		もう一方もrealへ変換される)

    $(LI オペランドの一方がdoubleなら、
		もう一方もdoubleへ変換される)

    $(LI オペランドの一方がfloatなら、
		もう一方もfloatへ変換される)

    $(LI それ以外なら、次の変換のあと、
		オペランド双方に整数の昇格をほどこします：

    $(OL
        $(LI どちらも同じ型なら、これ以上の変換はおこなわない)

        $(LI ２つのオペランドのsigned/unsingedが一致していれば、
			サイズの小さい型を大きい型へ変換する)

        $(LI signed型の方がサイズが大きければ、小さいunsingedの方を
			signed型へ変換。)

        $(LI signed型をunsingned型へ変換)
    )
    )
    )

    $(P 片方ないしは両方のオペランドが $(V1 typedef か) enum型であったならば、
	結果の型は次のルールで決まります:)

    $(OL
    $(LI オペランド双方が同じ型の場合、
	結果はその型になる)
    $(LI 片方がenum $(V1 か typedef) でもう片方がそのベース型の場合、
	結果の型はベース型になる)
    $(LI 二つのオペランドが異なるenum $(V1 か typedef) で共通の型をベースにしている場合、
	結果は、二つの型に最も近い共通のベース型になります。
	ベース型が近いとは、
	型からベース型への変換の列が短いことを言います。)
    )

    $(P 整数値は、
	整数昇格後のビットパターンを保持できないような型へ変換することはできません。
	例えば：)

---
ubyte  u1 = cast(byte)-1;  // エラー。-1 はubyteで表現できない
ushort u2 = cast(short)-1; // エラー。-1 はushortで表現できない
uint   u3 = cast(int)-1;   // ok, -1 は uint で表現できる
ulong  u4 = cast(long)-1; // ok, -1 は ulong で表現できる
---

    $(P 浮動小数点数型を
	暗黙に整数型へ変換することはできません。
    )

    $(P 複素浮動小数点型を
	暗黙に複素数でない浮動小数点型へ変換することはできません。
    )

    $(P 虚数型は暗黙にfloat, double, real型へ変換されません。
	また、
	float, double, real
	型が暗黙に虚数型へ変換されることもありません。
    )
)


$(SECTION2 bool,

    $(P bool型は1バイトの型で、
    $(D_KEYWORD true) か $(D_KEYWORD false) のどちらかの値のみを持つことができます。
	bool型に適用できる演算子は、
	&amp; | ^ &amp;= |= ^= ! &amp;&amp; || ?: のみです。
    with $(D_KEYWORD false) は 0、$(D_KEYWORD true) は 1 として
	任意の整数型へ暗黙に変換できます。
	数値リテラル 0 と 1 は、
    それぞれ bool値 $(D_KEYWORD false) と $(D_KEYWORD true)
	に暗黙変換可能です。
	式をboolへとキャストするのは、数値型に対しては0のの比較 !=0 と同じ意味で、
    ポインタや参照型に対しては、$(D_KEYWORD null) との比較 !=$(D_KEYWORD null)
    と同じ意味です。
    )
)


$(SECTION2 <a name="delegates">デリゲート</a>,

    $(P Dには"メンバへのポインタ"はありませんが、もっと有用な
    $(I delegates) という概念をサポートしています。
    デリゲートは
	オブジェクトへの参照と、非静的関数ポインタまたはクロージャやネスト関数へのポインタ、
	という２つの要素からなります。
    そのオブジェクトへの参照が、関数呼び出しの際の
    $(I this) ポインタとして使用されます。
    )

    $(P デリゲートは関数へのポインタと似た形で宣言します。
	ただし、(*) の変わりに予約語 $(B delegate) を書き、
	識別子は後ろに置きます。
    )

-------------------
int function(int) fp; // fp は関数へのポインタ
int delegate(int) dg; // dg は関数へのデリゲート
-------------------

    $(P 関数ポインタを宣言する C 風の構文は
$(V1 サポートされています:)
$(V2 非推奨となっています:)
    )

-------------------
int (*fp)(int);  // fp は関数へのポインタ
-------------------

    $(P デリゲートは関数ポインタの初期化と類似の方法で初期化します：
    )

-------------------
int func(int);
fp = &func;   // fpはfuncを指す

class OB {
    int member(int);
}
OB o;
dg = &o.member; // dg は オブジェクト $(I o) と
                // メンバ関数 $(I member) へのデリゲート
-------------------

    $(P デリゲートを、
	staticメンバ関数や非メンバ関数で初期化することはできません。
    )

    $(P デリゲートの呼び出しは、関数ポインタの呼び出しから類推できる通りです：
    )

-------------------
fp(3);   // func(3) を呼ぶ
dg(3);   // o.member(3) を呼ぶ
-------------------

    $(P 「メンバ関数ポインタ」に相当するものは、
    無名のラムダ関数を使うことで構築できます:)

---
class C {
  int a;
  int foo(int i) { return i + a; }
}

// mfp はメンバ関数ポインタ
auto mfp = function(C self, int i) { return self.foo(i); };
auto c = new C();  // C のインスタンスを作成
mfp(c, 1);  // c.foo(1) を呼び出す
---
)

$(SECTION2 $(D size_t) と $(D ptrdiff_t),

    $(P $(D size_t)
	は符号なしの基本整数型のいずれかの別名で、
    アドレスを取ることが可能なメモリのオフセットを表現するのに十分なサイズの型を表します。)

    $(P $(D ptrdiff_t) は $(D size_t) と同じサイズの符号ありの基本整数型の別名です。)
)

)

Macros:
    TITLE=型
    WIKI=Type
    CATEGORY_SPEC=$0

