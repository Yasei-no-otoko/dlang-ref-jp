Ddoc

$(SPEC_S インターフェイス,

$(GRAMMAR
$(GNAME InterfaceDeclaration):
	$(B interface) $(I Identifier) $(GLINK BaseInterfaceList)$(OPT) $(GLINK InterfaceBody)
	$(GLINK2 template, InterfaceTemplateDeclaration)

$(GNAME BaseInterfaceList):
	$(B :) $(GLINK2 class, InterfaceClasses)

$(GNAME InterfaceBody):
	$(B {) $(GLINK2 module, DeclDefs)$(OPT) $(B })
)

	$(P インターフェイスは、そのインターフェイスを継承する関数が
	必ず実装する必要のある関数のリストを記述したものです。
	インターフェイスを実装したクラスへの参照は、
	そのインターフェイスへの参照へと変換できます。)

	$(P Win32のCOM/OLE/ActiveXのような、
	ある種のOSのシステムオブジェクトは特別なinterfaceを提供しています。Dのインターフェイスで
	COM/OLE/ActiveX と互換性を持つものは $(LINK2 #COM-Interfaces, $(I COM Interfaces)) と呼ばれます。
	)

$(V2
	$(P $(LINK2 #CPP-Interfaces, $(I C++ Interfaces)) は、
	C++とのバイナリ互換性のために提供される別の形のインターフェイスです。
	)
)

	$(P インターフェイスは、クラスから派生することはできません。
	派生元は他のインターフェイスに限られます。クラスは、同じインターフェイスを複数回継承することはできません。
	)

------
interface D
{
    void foo();
}

class A : D, D	// エラー、インターフェイスの重複
{
}
------

	インターフェイスのインスタンスは作成できません。


------
interface D
{
    void foo();
}

...

D d = new D();		// エラー、インターフェイスのインスタンスは作成不可
------

$(V1
	$(P インターフェイスのvirtualメンバ関数は実装を持ちません。)

------
interface D
{
    void bar() { }	// エラー、実装を書くことはできない
}
------
)
$(V2
	$(P インターフェイスのvirtualメンバ関数は実装を持ちません。
	static関数やfinal関数の実装はinterfaceに記述します。
	)

------
interface D
{
    void bar() { }	// エラー、実装を書くことはできない
    static void foo() { } // ok
    final void abc() { } // ok
}
------

	$(P インターフェイスを継承したクラスで、
	インターフェイスのfinalやstaticメンバ関数をオーバーライドはできません。)

------
interface D {
    void bar();
    static void foo() { }
    final void abc() { }
}

class C : D {
    void bar() { } // ok
    void foo() { } // エラー、static D.foo() はオーバーライドできない
    void abc() { } // エラー、final D.abc() はオーバーライドできない
}
------

)
	$(P インターフェイス関数は、
	それを継承するクラスで全て定義されている必要があります：
	)
------
interface D
{
    void foo();
}

class A : D
{
    void foo() { }	// ok, 実装を提供している。
}

class B : D
{
    int foo() { }	// エラー, void foo() の実装がない。
}
------

	インターフェイスは継承して、関数をオーバーライドできます：

------
interface D
{
    int foo();
}

class A : D
{
    int foo() { return 1; }
}

class B : A
{
    int foo() { return 2; }
}

...

B b = new B();
b.foo();		// 2 を返す
D d = cast(D) b;	// ok, B は AによるDの実装を継承しているので。
d.foo();		// 2 を返す
------

	$(P インターフェイスは、派生クラスで再実装可能です：)

------
interface D
{
    int foo();
}

class A : D
{
    int foo() { return 1; }
}

class B : A, D
{
    int foo() { return 2; }
}

...

B b = new B();
b.foo();		// 2 を返す
D d = cast(D) b;
d.foo();		// 2 を返す
A a = cast(A) b;
D d2 = cast(D) a;
d2.foo();		// 2 を返す。BのDではなくAのDに見えるけれど。
------

	$(P インターフェイスを再実装するには、その全ての関数を実装しなければなりません。
	基底クラスからの継承はされません：
	)

------
interface D
{
    int foo();
}

class A : D
{
    int foo() { return 1; }
}

class B : A, D
{
}		// エラー、インターフェイス D のための foo() が無い
------

$(V2
$(SECTION2 $(LNAME2 InterfaceContracts, 契約付きインターフェイス),

	$(P インターフェイスのメンバ関数には、body はありませんが、
	事前条件・事後条件の契約を記述できます。これらの契約は、
	インターフェイスを継承したクラスに全て継承されます。
	)

---
interface I
{
    int foo(int i)
      in { assert(i > 7); }
      out (result) { assert(result & 1); }

    void bar();
}
---
)

$(SECTION2 $(LNAME2 ConstInterface, const/immutable インターフェイス),
	$(P インターフェイスが記憶域クラス $(CODE const) か $(CODE immutable)
	で修飾されていた場合、
	その全てのメンバが $(CODE const) か $(CODE immutable)
	記憶域クラスは継承されません。
	)
)
)

$(SECTION2 $(LNAME2 COM-Interfaces, COM インターフェイス),

	$(P インターフェイスの一種として、COMインターフェイスがあります。COMインターフェイスは、
	WindowsのCOMオブジェクトとして直接適合するように設計されます。全ての COM
	オブジェクトは COMインターフェイスによって表現でき、COMインターフェイスを持つ全ての
	D言語のオブジェクトは、外部のCOMクライアントから使用できます。
	)

	$(P COMインターフェイスは、$(D std.c.windows.com.IUnknown)
	から派生することで定義します。COMインターフェイスは、
	D言語の通常のインターフェイスと以下の点で異なります：
	)

	$(UL
	$(LI $(D std.c.windows.com.IUnknown) から派生している。)
	$(LI $(I DeleteExpression) の引数として使えない。)
	$(LI 参照は、周囲のクラスのオブジェクトへのUpcastや、
		派生インターフェイスへのDowncastをすることが許されない。
		この目的には、COMの標準的なやり方で適切な $(D QueryInterface())
		が実装されていなければなりません。)
	$(LI COMインターフェイスから派生したクラスはCOMクラスです。)
	$(LI COMクラスのメンバ関数のデフォルトのリンケージは
	is $(D extern(System)) です)
	$(LI $(D vtbl[]) の先頭のメンバは
	InterfaceInfo へのポインタではなく、最初の仮想関数ポインタになります。)
	)
)

$(V2
$(SECTION2 $(LNAME2 CPP-Interfaces, C++インターフェイス),

	$(P C++のリンケージで宣言されたインターフェイスはC++インターフェイスになります:
	)

---
extern (C++) interface Ifoo
{
    void foo();
    void bar();
}
---

	$(P これは以下のC++での宣言に対応します:)

$(CPPCODE
class Ifoo
{
    virtual void foo();
    virtual void bar();
};
)

	$(P C++インターフェイスから派生したインターフェイスも全て、
	C++インターフェイスになります。
	C++インターフェイスは、以下の点でDのインターフェイスと異なります:
	)

	$(UL
	$(LI $(I DeleteExpression) の引数にできない)
	$(LI 参照を外部クラスのオブジェクトへアップキャストすることや、
	派生インターフェイスへダウンキャストすることができません。)
	$(LI メンバ関数の呼び出し規約のデフォルトが、
	DではなくC++の規約になります。)
	$(LI $(D vtbl[]) の先頭メンバが
	$(D Interface) へのポインタではなく、先頭の仮想関数ポインタとなります。)
	)

	$(P さらに詳しい情報については
	$(LINK2 http://lunesu.com/uploads/ModernCOMProgramminginD.pdf, Modern COM Programming in D) をご覧下さい。
	)
)
)

)

Macros:
	TITLE=インターフェイス
	WIKI=Interface
	CATEGORY_SPEC=$0

