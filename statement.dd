Ddoc

$(SPEC_S 文,

CやC++プログラマの方は、Dの文を非常に親しみやすく感じるでしょう。
いくつか面白い追加もあります。 

$(GRAMMAR
$(GNAME Statement):
    $(B ;)
    $(GLINK NonEmptyStatement)
    $(GLINK ScopeBlockStatement)

$(GNAME NoScopeNonEmptyStatement):
    $(GLINK NonEmptyStatement)
    $(GLINK BlockStatement)

$(GNAME NoScopeStatement):
    $(B ;)
    $(GLINK NonEmptyStatement)
    $(GLINK BlockStatement)

$(GNAME NonEmptyOrScopeBlockStatement):
    $(GLINK NonEmptyStatement)
    $(GLINK ScopeBlockStatement)

$(GNAME NonEmptyStatement):
    $(GLINK NonEmptyStatementNoCaseNoDefault)
    $(GLINK CaseStatement)
$(V2      $(GLINK CaseRangeStatement)
)    $(GLINK DefaultStatement)

$(GNAME NonEmptyStatementNoCaseNoDefault):
    $(GLINK LabeledStatement)
    $(GLINK ExpressionStatement)
    $(GLINK DeclarationStatement)
    $(GLINK IfStatement)
    $(GLINK WhileStatement)
    $(GLINK DoStatement)
    $(GLINK ForStatement)
    $(GLINK ForeachStatement)
    $(GLINK SwitchStatement)
$(V2      $(GLINK FinalSwitchStatement)
)    $(GLINK ContinueStatement)
    $(GLINK BreakStatement)
    $(GLINK ReturnStatement)
    $(GLINK GotoStatement)
    $(GLINK WithStatement)
    $(GLINK SynchronizedStatement)
    $(GLINK TryStatement)
    $(GLINK ScopeGuardStatement)
    $(GLINK ThrowStatement)
$(V1    $(GLINK VolatileStatement)
)    $(GLINK AsmStatement)
    $(GLINK PragmaStatement)
    $(GLINK MixinStatement)
$(V2      $(GLINK ForeachRangeStatement))
    $(GLINK2 version, ConditionalStatement)
    $(GLINK2 version, StaticAssert)
    $(GLINK2 template-mixin, TemplateMixin)
    $(GLINK2 module, ImportDeclaration)
)


        $(P $(I Statement) の文法と
        $(GLINK2 declaration, Declaration) の文法の間の曖昧性は、
	すべて、Declaration を優先するという形で解決されます。
        $(I Statement) として解釈させたい場合は、
	括弧を使うことで $(I Statement) としてしか構文解析できないように書いて下さい。
        )

<h2>$(LNAME2 ScopeStatement, スコープ文)</h2>

$(GRAMMAR
$(I ScopeStatement):
    $(GLINK NonEmptyStatement)
    $(GLINK BlockStatement)
)

        $(P 文法定義でスコープ文(ScopeStatement)とされた箇所では
        $(I NonEmptyStatement) か
        $(GLINK BlockStatement) を書くことができ、ローカルシンボルのスコープが新しく導入されます。
        )

        $(P 新しいスコープが導入されるとは言っても、
	ローカルシンボルの宣言が、同じ関数の他の宣言を隠す (shadowする)
	ことは許されていません。
        )

--------------
void func1(int x) {
  int x;    // 不正。x は引数 x を隠す

  int y;

  { int y; } // 不正。 y は外側のスコープの y を隠す

  void delegate() dg;
  dg = { int y; }; // ok。この y は同じ関数の中ではない

  struct S {
    int y;    // ok。この y はメンバ変数。ローカルシンボルでない
  }

  { int z; }
  { int z; }  //  ok。この z は他の z を隠さない

  { int t; }
  { t++;   }  // 不正。t は未定義
}
--------------

$(P
        これは、
	複雑な関数で意図せず宣言が他の宣言を隠すことに起因するバグを避けるための仕様です。
	ひとつの関数内では、ローカル名は重ならないようにすべきでしょう。
)


<h2>$(LNAME2 ScopeBlockStatement, スコープブロック文)</h2>

$(GRAMMAR
$(I ScopeBlockStatement):
    $(GLINK BlockStatement)
)

        $(P 文法定義でスコープブロック文 (ScopeBlockStatement) とされた箇所には
        $(GLINK BlockStatement) のみが記述でき、新しいスコープが導入されます。
        )

<h2>$(LNAME2 LabeledStatement, ラベル付き文)</h2>

$(P     文にはラベルを付けられます。
	ラベルとは、文の前に置く識別子です。
)

$(GRAMMAR
$(I LabeledStatement):
    $(I Identifier) : $(PSSEMI)
)

$(P
        空文を含めて任意の文がラベル付け可能で、
	goto文の飛び先とできます。
	continue 文や
	break 文の飛び先ともなり得ます。
)
$(P
        ラベルの名前空間は、
	宣言や変数、型などとは独立しています。
	しかしそれにもかかわらず、ローカルの宣言と同じ名前のラベルは使用できません。
	ラベル名の有効範囲は、そのラベルのある関数本体のです。
	名前空間のネストは行われません。つまり、
	ブロックの中のラベルは、外からでもアクセスできます。
)

<h2>$(LNAME2 BlockStatement, ブロック文)</h2>

$(GRAMMAR
$(I BlockStatement):
    $(B { })
    $(B {) $(GLINK StatementList) $(B })

$(GNAME StatementList):
    $(PSSEMI_PSCURLYSCOPE)
    $(PSSEMI_PSCURLYSCOPE) $(I StatementList)
)

$(P
        ブロック文とは、{ } で囲まれた文の並びのことです。
	テキスト上での順序と同じ順で、各文が実行されます。
)
<h2>$(LNAME2 ExpressionStatement, 式文)</h2>

$(GRAMMAR
$(I ExpressionStatement):
    $(EXPRESSION) $(B ;)
)

        式が評価されます。
        <p>

       副作用のない式、
	例えば $(D (x + x)),
	は式文としては不正です。
	そのような文が必要な場合は、
	 $(D_KEYWORD void) へとキャストすることで正当なコードになります。

----
int x;
x++;               // ok
x;                 // 不正
1+1;               // 不正
cast(void)(x + x); // ok
----

<h2>$(LNAME2 DeclarationStatement, 宣言文)</h2>

	変数や型を宣言します。

$(GRAMMAR
$(I DeclarationStatement):
    $(I Declaration)
)

        $(P 宣言文の例です:)

----
int a;        // a を 型 int と宣言し、0 に初期化
struct S { }  // 構造体 s の宣言
alias int myint;
----

<h2>$(LNAME2 IfStatement, if 文)</h2>

	if文では、文を条件付きで実行します。

$(GRAMMAR
$(I IfStatement):
    $(B if $(LPAREN)) $(GLINK IfCondition) $(B $(RPAREN)) $(GLINK ThenStatement)
    $(B if $(LPAREN)) $(GLINK IfCondition) $(B $(RPAREN)) $(GLINK ThenStatement) $(B else) $(GLINK ElseStatement)

$(GNAME IfCondition):
    $(EXPRESSION)
    $(B auto) $(I Identifier) $(B =) $(EXPRESSION)
    $(GLINK2 declaration, BasicType) $(GLINK2 declaration, Declarator) $(B =) $(EXPRESSION)

$(GNAME ThenStatement):
    $(PSSCOPE)

$(GNAME ElseStatement):
    $(PSSCOPE)
)

        $(EXPRESSION)  が評価されます。この結果は、boolean
	であるかまたはbooleanに変換可能な型です。
	結果がtrueならば $(I ThenStatement) が実行され、そうでなければ $(I ElseStatement)
        が実行されます。
        <p>

	'ぶら下がりelse' の問題については、elseは一番近いifと結合する、
	と定められています。
        <p>

        $(B auto) $(I Identifier)  を記述した場合、
	その名前の変数が宣言されて、
        $(EXPRESSION)
		の型と値が割り当てられてます。変数のスコープは、
	初期化時から $(I ThenStatement) の終了時までです。
        <p>

        $(I Declarator) iを記述した場合、
		その名前の変数が宣言されて、
        $(EXPRESSION)
		の型と値が割り当てられてます。変数のスコープは、
		初期化時から $(I ThenStatement) の終了時までです。

---
import std.regexp;
...
if (auto m = std.regexp.search("abcdef", "b(c)d"))
{
  writefln("[%s]", m.pre);      // [a] を表示
  writefln("[%s]", m.post);     // [ef] を表示
  writefln("[%s]", m.match(0)); // [bcd] を表示
  writefln("[%s]", m.match(1)); // [c] を表示
  writefln("[%s]", m.match(2)); // [] を表示
}
else
{
  writefln(m.post);    // エラー。m は未定義
}
writefln(m.pre);         // エラー。m は未定義
---

<h2>$(LNAME2 WhileStatement, while 文)</h2>

$(GRAMMAR
$(I WhileStatement):
    $(B while $(LPAREN)) $(EXPRESSION) $(B $(RPAREN)) $(PSSCOPE)
)

	while文は簡単なループを構成します。

        まず $(EXPRESSION) が評価されます。
	この結果は、boolean
	であるかまたはbooleanに変換可能な型です。結果がtrueならば $(PSSCOPE) が実行され、
        もう一度 $(EXPRESSION)  の評価へ戻ります。
	このループは 
        $(EXPRESSION) がfalseへ評価されるまで続きます。

---
int i = 0;
while (i < 10) {
  foo(i);
  i++;
}
---

        $(GLINK BreakStatement) はループを終了します。
        $(GLINK ContinueStatement) は、
        直ちに $(EXPRESSION) の評価へ処理を飛ばします。

<h2>$(LNAME2 DoStatement, do 文)</h2>

$(V1
$(GRAMMAR
$(I DoStatement):
    $(B do) $(PSSCOPE) $(B  while $(LPAREN)) $(EXPRESSION) $(B $(RPAREN))
)
)
$(V2
$(GRAMMAR
$(I DoStatement):
    $(B do) $(PSSCOPE) $(B  while $(LPAREN)) $(EXPRESSION) $(B $(RPAREN)) $(B ;)
)
)

	do 文は簡単なループを構成します。

        $(PSSCOPE)  が実行されます。
	その次に、boolean
	であるかまたはbooleanに変換可能な型をもつ
        $(EXPRESSION) が評価されます。
	trueならばまたループを繰り返します。
        $(EXPRESSION) がfalseへ評価されるまでループが続きます。

---
int i = 0;
do {
  foo(i);
} while (++i < 10);
---

        $(GLINK BreakStatement) はループを終了します。
        $(GLINK ContinueStatement) は、
        直ちに $(EXPRESSION) の評価へ処理を飛ばします。

<h2>$(LNAME2 ForStatement, for 文)</h2>

	for文は、
	initialization, test, increment の３つの節を持つループです。

$(GRAMMAR
$(I ForStatement):
    $(B for $(LPAREN))$(GLINK Initialize) $(I Test)$(OPT) $(B ;) $(GLINK Increment)$(OPT)$(B $(RPAREN)) $(PSSCOPE)

$(GNAME Initialize):
    $(B ;)
    $(PS0)

$(GNAME Test):
    $(EXPRESSION)

$(GNAME Increment):
    $(EXPRESSION)
)

        $(P まず $(I Initialize)  が実行されます。
	その次に、boolean
	であるかまたはbooleanに変換可能な型をもつ $(I Test)
        が評価されます。これがtrueなら内容文が実行されます。その後、
        $(I Increment) が実行され、次にまた
        $(I Test) 	の評価に行きます。
	これがtrueならばまたループが繰り返されます。
        $(I Test) がfalseになるまでこのループが続きます。
        )

        $(P $(GLINK BreakStatement) はループを終了します。
        $(GLINK ContinueStatement) は、
	直ちに $(I Increment) の評価へ処理を飛ばします。
        )

        $(P $(I ForStatement) は新しいスコープを導入します。
        $(I Initialize) で変数が宣言されていれば、その変数のスコープは
        for文の本体の最後まで拡大されます。例
        )

--------------
for (int i = 0; i < 10; i++)
  foo(i);
--------------

	これは次と同等です。

--------------
{
  int i;
  for (i = 0; i < 10; i++)
    foo(i);
}
--------------

	ループの中身を空にはできません：

--------------
for (int i = 0; i < 10; i++)
  ;       // 不正
--------------

	代わりに次のように書きます：

--------------
for (int i = 0; i < 10; i++)
{
}
--------------

        $(I Initialize) は省略可能です。 $(I Test) も省略可能で、
	その場合あたかも常にtrueと評価されるかのように扱われます。

<h2>$(LNAME2 ForeachStatement, foreach 文)</h2>

	foreach文では、集成体の内容をループします。

$(GRAMMAR
$(I ForeachStatement):
    $(I Foreach) $(B $(LPAREN))$(GLINK ForeachTypeList) $(B ;) $(GLINK Aggregate)$(B $(RPAREN)) $(PS0)

$(GNAME Foreach):
    $(B foreach)
    $(B foreach_reverse)

$(GNAME ForeachTypeList):
    $(GLINK ForeachType)
    $(GLINK ForeachType) , $(I ForeachTypeList)

$(GNAME ForeachType):
    $(B ref)$(OPT) $(GLINK2 declaration, BasicType) $(GLINK2 declaration, Declarator)
    $(B ref)$(OPT) $(I Identifier)

$(GNAME Aggregate):
    $(EXPRESSION)
)

$(P
        $(I Aggregate) がまず評価されます。
		その結果は、静的配列, 動的配列,
		連想配列, 構造体, クラス, デリゲート, タプル のいずれかの型を持つ式でなければなりません。次に、
        集成体の各要素につき一度ずつ、$(PS0) が実行されます。
        毎回、
        $(I ForeachTypeList)
		で宣言した変数にその集成体の要素がコピーされます。
        変数が 
        $(B ref)
        だった場合、参照となります。
)
$(P
        集成体はループ中は不変でなければなりません。つまり、
	ループ本体の
        $(PS0) で要素を追加したり削除することは禁止されています。
)

<h3>配列に対する foreach</h3>

$(P
        式部分が静的/動的配列な場合、
	１つか２つの変数を宣言することが可能です。
	変数が１つの時は、$(I value)と呼ばれ、
	配列の要素が一つずつ格納されます。
	変数の型は、下で示す特別な場合を除き、
	配列の内容と合致しなければなりません。
	２つの変数が宣言されていると、一つ目が
        $(I index)、二つ目が
        $(I value) と呼ばれます。 $(I index) 変数は
        $(B int) か $(B uint) または $(B size_t) 型とし、
        $(I ref) 指定はできません。
	配列要素のインデックスが格納されます。
)
--------------
char[] a;
...
foreach (int i, char c; a)
{
  writefln("a[%d] = '%c'", i, c);
}
--------------

        $(P $(B foreach) では、
	配列の要素は0番目から始まって
	最大の添字を持つ要素で終わる順番で処理されます。
        $(B foreach_reverse) では、
	配列要素が逆順で渡されます。
        )

<h3>文字の配列に対する foreach</h3>

        $(P 式部分が
        $(B char), $(B wchar), $(B dchar) の静的/動的配列である場合、
        $(I value) の型は
        $(B char), $(B wchar), $(B dchar)のいずれにもできます。
		これを用いることで、
		どの種類のユニコード文字配列も、任意の種類のユニコード文字型へとデコードすることができます：
        )

--------------
char[] a = "\xE2\x89\xA0"$(V2 .dup);  // \u2260 を UTF-8 の3バイトで表現

foreach (dchar c; a)
{
  writefln("a[] = %x", c); // 'a[] = 2260' を表示
}

dchar[] b = "\u2260"d$(V2 .dup);

foreach (char c; b)
{
  writef("%x, ", c);  // 'e2, 89, a0' を表示
}
--------------


        $(P 集成体が文字列リテラルのときは、
	char, wchar, dchar 配列としてアクセス可能です:
        )

--------------
void test() {
  foreach (char c; "ab") {
    writefln("'%s'", c);
  }
  foreach (wchar w; "xy") {
    writefln("'%s'", w);
  }
}
--------------

        $(P 出力は次のようになります:
        )

$(CONSOLE
'a'
'b'
'x'
'y'
)

<h3>連想配列に対する foreach</h3>

        $(P 式部分が連想配列な場合、
	１つか２つの変数を宣言することが可能です。
	変数が１つの時はその変数は $(I value) と呼ばれ、
	配列の要素が一つずつ格納されます。
	変数の型は配列の内容と合致しなければなりません。
	２つの変数が宣言されていると、一つ目が $(I index)、二つ目が
        $(I value) と呼ばれます。 $(I index) 変数の型は連想配列のインデックス型と合致させます。
        $(I ref)
		指定はできません。配列要素のインデックスが格納されます。
        $(B foreach)
		で要素が列挙される順番は決まっていません。
		また、連想配列に対する
		$(B foreach_reverse) は不正です。
        )

--------------
double[$(V1 char[])$(V2 string)] a; // $(I index) 型は $(V1 char[])$(V2 string), $(I value) 型は double
...
foreach ($(V1 char[])$(V2 string) s, double d; a)
{
  writefln("a['%s'] = %g", s, d);
}
--------------

$(V2
<h3>$(LNAME2 foreach_with_ranges, レンジを表す構造体やクラスに対する foreach)</h3>

        $(P 以下のプロパティの定義された構造体やクラスは
	レンジと呼ばれ、foreachでループすることが可能です：
        )

        $(TABLE2 レンジのプロパティ,
        $(TR $(TH プロパティ) $(TH 用途))
        $(TR $(TD $(D .empty)) $(TD もう要素がない時に true を返す))
        $(TR $(TD $(D .front)) $(TD レンジの最左端の要素を返す))
        $(TR $(TD $(D .back)) $(TD レンジの最右端の要素を返す))
        )

        $(TABLE2 foreach でのレンジの操作,
        $(TR $(TH メソッド) $(TH 用途))
        $(TR $(TD $(D .popFront())) $(TD レンジの左端をひとつ右に動かす))
        $(TR $(TD $(D .popBack())) $(TD レンジの右端をひとつ左に動かす))
        )

        $(P つまり:)

---
foreach (e; range) { ... }
---

        $(P このコードは以下のように変形されます:)

---
for (auto __r = range; !__r.empty; __r.popFront())
{
  auto e = __r.front;
  ...
}
---

        $(P 同様に:)

---
foreach_reverse (e; range) { ... }
---

        $(P このコードは以下のように変形されます:)

---
for (auto __r = range; !__r.empty; __r.popBack())
{
  auto e = __r.back;
  ...
}
---

        $(P レンジとしてのプロパティが存在しない場合は、代わりに $(D opApply)
	メソッドが使用されます。
        )
)

<h3>opApply を持つ構造体やクラスに対する foreach</h3>

        $(P
        構造体やクラスオブジェクトについては、 $(B foreach) の順序は特別な
        $(LNAME2 opApply, $(I opApply)) メンバ関数で定義されます。
        $(B foreach_reverse) の動作は
        $(LNAME2 opApplyReverse, $(I opApplyReverse)) メンバ関数の定義によります。
	対応する foreach 文を使用するためには、
	型ごとにこれらの特別な関数をユーザー定義する必要があります。
	これらの関数の型は次の通りです:
        )

--------------
int $(B opApply)(int delegate(ref $(I Type) [, ...]) $(I dg));

int $(B opApplyReverse)(int delegate(ref $(I Type) [, ...]) $(I dg));
--------------

        $(P $(I Type) は foreach で
        $(I Identifier) の宣言に使われた $(I Type) と一致するものです。複数の $(I ForeachType) は、
        $(B opApply) や $(B opApplyReverse) へ渡されるdelegateの複数の
        $(I Type) に対応します。
	複数個の $(B opApply) や $(B opApplyReverse) が存在してもかまいません。
	適切な物が、
        $(I ForeachStatement) の $(I ForeachType) と $(I dg)
        の型が合うように選択されます。関数の本体では、
	そのオブジェクト内の要素を順にたどり、
        それぞれを $(I dg)
        へ渡します。$(I dg) が 0 を返せば、
	処理を次の要素へと進めます。
        $(I dg)  が 0以外の値を返すと、
	繰り返しを止めてその値をreturnする必要があります。
	それ以外で、全ての要素をたどり終わったならば、最後に0をreturnします。
        )

        $(P 例えば、二つの要素を含むコンテナクラスを考えてみましょう：
        )

--------------
class Foo {
  uint[2] array;

  int $(B opApply)(int delegate(ref uint) $(I dg))
  {
    int result = 0;

    for (int i = 0; i < array.length; i++)
    {
      result = $(I dg)(array[i]);
      if (result)
        break;
    }
    return result;
  }
}
--------------

	これを使った例は次のようになるでしょう：

--------------
void test() {
  Foo a = new Foo();

  a.array[0] = 73;
  a.array[1] = 82;

  foreach (uint u; a)
  {
    writefln("%d", u);
  }
}
--------------

	出力はこうです：

$(CONSOLE
73
82
)

<h3>デリゲートに対する foreach</h3>

        $(P $(I Aggregate) には、
        $(B opApply) と同じ型のデリゲートを指定することも可能です。これによって、
	一つのクラスや構造体に
	多くのループ方法を名前付きで共存させることができます。)

<h3>タプルに対する foreach</h3>

$(P
集成体としてタプルを指定した場合は、
	一つか二つの変数を宣言できます。一つの場合、
	その値にはタプルの要素が一つずつセットされます。
	変数の型を指定した場合、
	タプルの中身と合う型でなければなりません。
	型が指定されていないときは、
	変数の型はタプルの要素の型になり、繰り返し毎に変化します。
	二つ変数を宣言した場合、
        一つめが $(I index)、
        二つめが $(I value) となります。$(I index)
        は $(B int) 型か $(B uint) 型のどちらかで、$(I ref)  にはできません。
        タプルのいくつ目の要素であるかが格納されます。
)

$(P
        タプルが型のリストであった場合、
	foreach文はそれぞれの型に対して一度ずつ実行され、
	変数はその型へのaliasとなります。
)

-----
import std.stdio;
import std.typetuple; // TypeTupleテンプレート

void main() {
  alias TypeTuple!(int, long, double) TL;

  foreach (T; TL)
  {
    write$(V1 f)ln(typeid(T));
  }
}
-----

        $(P この出力は:)

$(CONSOLE
int
long
double
)

<h3>foreach の ref パラメータ</h3>

        $(P 元の要素を書き換えるためには、$(B ref) が使えます。
        )

--------------
void test() {
  static uint[2] a = [7, 8];

  foreach (ref uint u; a)
  {
    u++;
  }
  foreach (uint u; a)
  {
    writefln("%d", u);
  }
}
--------------

	出力：

$(CONSOLE
8
9
)
        $(P $(B ref) はインデックス値には適用できません。)

        $(P $(I ForeachType) に型指定がなかった場合は、
        $(I Aggregate)
		の型から自動で推論されます。
        )

<h3>foreach の制限事項</h3>

        $(P foreachの繰り返しの最中に、
	集成体自身をサイズ変更や再割り当て、
	解放や再代入、破棄などすることはできません。
        )

--------------
int[] a;
int[] b;
foreach (int i; a)
{
  a = null;       $(V1            )// エラー
  $(V2 a.length += 10;)$(V1 a.length = a.length + 10;) // エラー
  a = b;          $(V1            )// エラー
}
a = null;         $(V1            )// ok
--------------

$(V2
<h2>$(LNAME2 ForeachRangeStatement, foreach range 文)</h2>

        foreach range 文は指定された範囲の値をループします。

$(GRAMMAR
$(I ForeachRangeStatement):
    $(GLINK Foreach) $(LPAREN)$(GLINK ForeachType) $(B ;) $(GLINK LwrExpression) $(B ..) $(GLINK UprExpression) $(B $(RPAREN)) $(PSSCOPE)

$(GNAME LwrExpression):
    $(EXPRESSION)

$(GNAME UprExpression):
    $(EXPRESSION)
)

        $(P
        $(I ForeachType) では変数を明示的な型指定付きで宣言するか、
        $(I LwrExpression) と $(I UprExpression) から暗黙に推論される型で宣言します。
        $(I n) を
        $(I UprExpression) - $(I LwrExpression) としたとき、$(I ScopeStatement) は $(I n) 回実行されます。
        もし $(I UprExpression) が $(I LwrExpression) 以下であったならば、
        $(I ScopeStatement) の実行回数はゼロになります。
        $(I Foreach) が $(B foreach) のとき、変数はまず
        $(I LwrExpression) に設定され、本体を１回実行するたびにその後に１ずつ増えていきます。
        $(I Foreach) が $(B foreach_reverse) の時は、変数はまず
        $(I UprExpression) に設定され、本体実行の前に１ずつ減っていきます。
        $(I ScopeStatement)
        の実行回数に関係なく、
        $(I LwrExpression) と $(I UprExpression) はどちらもちょうど１回だけ実行されます。
        )

---
import std.stdio;

int foo() {
  write("foo");
  return 10;
}

void main() {
  foreach (i; 0 .. foo())
  {
    write(i);
  }
}
---

        $(P 出力:)

$(CONSOLE
foo0123456789
)
)

<h3>foreach からの break と continue による脱出</h3>


        $(P foreach 内での $(GLINK BreakStatement) はforeachのループを終了し、
        $(GLINK ContinueStatement) 
        はすぐに制御を次の要素に移します。
        )

<h2>$(LNAME2 SwitchStatement, switch 文)</h2>

	switch文は、
	式の値に応じて
	case文のうちの一つへ処理を移します。

$(GRAMMAR
$(I SwitchStatement):
    $(B switch $(LPAREN)) $(EXPRESSION) $(B $(RPAREN)) $(PSSCOPE)

$(GNAME CaseStatement):
    $(B case) $(GLINK2 expression, ArgumentList) $(B :) $(PSSEMI_PSCURLYSCOPE_LIST)

$(V2 $(GNAME CaseRangeStatement):
    $(B case) $(GLINK FirstExp) $(B : .. case) $(GLINK LastExp) $(B :) $(PSSEMI_PSCURLYSCOPE_LIST)

$(GNAME FirstExp):
    $(ASSIGNEXPRESSION)

$(GNAME LastExp):
    $(ASSIGNEXPRESSION)
)
$(GNAME DefaultStatement):
    $(B default :) $(PSSEMI_PSCURLYSCOPE_LIST)

$(GNAME ScopeStatementList):
    $(GLINK StatementListNoCaseNoDefault)

$(GNAME StatementListNoCaseNoDefault):
    $(GLINK StatementNoCaseNoDefault)
    $(GLINK StatementNoCaseNoDefault) $(I StatementListNoCaseNoDefault)

$(GNAME StatementNoCaseNoDefault):
    $(B ;)
    $(GLINK NonEmptyStatementNoCaseNoDefault)
    $(GLINK ScopeBlockStatement)
)

        $(P $(EXPRESSION) が評価されます。
	結果の型 T は整数型か、
	 $(CODE char[]), $(CODE wchar[]), $(CODE dchar[]).
        のいずれかです。結果はcaseの式の各々と
	比較され、マッチしたcase文へ処理が移ります。
        )

        $(P case の $(GLINK2 expression, ArgumentList) は、
		コンマで区切られた式のリストです。
        )

$(V2
        $(P $(I CaseRangeStatement) は、
        $(I FirstExp) から $(I LastExp) までの case ラベルを並べるための省略記法です。
        )
)

        $(P どのcaseの式ともマッチしなかった場合、default文があれば、
	処理はdefault文へ移ります。
        )

$(V1
        $(P
		更にdefault文もなかった場合は、
$(V1
        $(LINK2 phobos/std_switcherr.html, $(CODE std.switcherr.SwitchError))
)
$(V2
        $(LINK2 core_exception.html, $(CODE core.exception.SwitchError))
)
        が投げられます。
        )
)
$(V2
        $(P switch 文には必ず default 節が必要です。)
)

        $(P
$(V1
        caseの式は、
		定数値か定数配列でなければなりません。
)
$(V2
        caseの式は、定数値か定数配列、または実行時初期化された
	整数型の const/immutable
	変数でなければなりません。
)
       また、switch の
        $(EXPRESSION) の型へと暗黙変換可能である必要があります。
        )

        $(P case の式は全て異なる値へと評価される必要があります。
$(V2
        const/immutable 変数には必ず全て違う変数を指定します。
	値が同じだった場合、
	その値をもつ最初のcase節に制御が渡ります。
    default 節は必ずちょうど一個書かなければいけません。
)
$(V1
        二個以上の default 節を書くのは不正です。
)
        )

        $(P $(GLINK ScopeStatementList) は新しいスコープを作ります。
        )

        $(P switch文に関連付けられたcase文やdefault文は、
	ネストしたブロックの中にあっても構いません。
	例えば次は許されます：
        )

--------------
switch (i) {
  case 1:
  {
    case 2:
  }
    break;
}
--------------

$(V1
        $(P case文は続くcase文へと 'fall through' します。
	 break 文があれば、switch の $(I BlockStatement) を終了します。
	例えば：
        )

--------------
switch (i) {
  case 1:
    x = 3;
  case 2:
    x = 4;
    break;

  case 3,4,5:
    x = 5;
    break;
}
--------------

        $(P $(CODE i) が $(CODE 1) ならば $(CODE x) は $(CODE 4) になります。
        )
)

$(V2
        $(P $(GLINK ScopeStatementList) は空であるか、または最後の case 以外、
        $(GLINK ContinueStatement), $(GLINK BreakStatement),
        $(GLINK ReturnStatement), $(GLINK GotoStatement), $(GLINK ThrowStatement)
        , assert(0) のいずれかで終える必要があります。
        これは C言語の間違いやすい暗黙の fall-through から決別するための処置です。
        fall-throught を明示するには $(B goto case;) を使います。
        )

--------------
int number;
string message;
switch (number)
{
  default:    // 正しい: 'throw' で終わる
    throw new Exception("unknown number"); 

  case 3:     // 正しい: 'break' で終わる ('switch' を抜けます)
    message ~= "three ";
    break;

  case 4:     // 正しい: 'continue' で終わる (周囲のループを continue します)
    message ~= "four ";
    continue;

  case 5:     // 正しい: 'goto' で終わる (次の case への明示 fall-through)
    message ~= "five ";
    goto case;

  case 6:     // $(B エラー): 暗黙の fall-through
    message ~= "six ";

  case 1:     // 正しい: case の中身が空
  case 2:     // 正しい: これはswitch文の最後のcase
    message = "one or two";
}
--------------

        $(P break 文は switch の $(I BlockStatement) を抜けます。)
)

        $(P $(LNAME2 string-switch, 文字列もswitch文で使用できます)。
        例えば:
        )

--------------
char[] name;
...
switch (name) {
  case "fred":
  case "sally":
    ...
}
--------------

        $(P コマンドラインスイッチの処理などへの応用では、
	この構文によって、直接的でエラーの少ないコードが書けるようになります。
	char, wchar, dchar 文字列のいずれも使用できます。
        )

        $(P $(B 実装ノート:)
	コンパイラのコード生成器は、
	caseは実行頻度の高い順に並べられていると仮定して構いません。
	プログラムの正しさの面ではこの仮定は無関係ですが、
	パフォーマンスの面を考えると
	意味があります。
        )

$(V2
<h2>$(LNAME2 FinalSwitchStatement, final switch 文)</h2>

$(GRAMMAR
$(I FinalSwitchStatement):
    $(B final switch $(LPAREN)) $(EXPRESSION) $(B $(RPAREN)) $(PSSCOPE)
)

        $(P final switch 文は基本的には switch 文ですが、
	以下の違いがあります:)

        $(UL
        $(LI $(GLINK DefaultStatement) は使用できない)
        $(LI $(GLINK CaseRangeStatement) は使用できない)
        $(LI switch の $(EXPRESSION) がenum型の場合、
	全てのenumメンバが $(GLINK CaseStatement) に現れなければならない。)
        $(LI case 式に、
	実行時に決まる値を書くことはできない)
        )

)

<h2>$(LNAME2 ContinueStatement, continue 文)</h2>

$(GRAMMAR
$(I ContinueStatement):
    $(B continue) $(I Identifier)$(OPT) $(B ;)
)

	continue文はループの現在の処理を中断し、
	ループの先頭へ処理を戻します。

	continueは、最内周のwhile,for,foreach,doループにはたらきます。
	for文のincrement節は実行されます。
        <p>

        continue の後ろに $(I Identifier) が続いている時は、
	その $(I Identifier)
	はcontinue文を囲うループのラベルでなければならず、
	continue文によってそのループの先頭へ処理を戻します。
	そのラベルの付いたループが存在しなければエラーです。
        <p>

	関連するfinally節は全て実行され、
	同期オブジェクトは解放されます。
        <p>

        $(B 注:)
		finally節でreturn,throw文やfinallyの外へのgoto文が実行された場合、
		continueの目的地へは処理は到達しません。

---
for (i = 0; i < 10; i++)
{
  if (foo(i))
    continue;
  bar();
}
---

<h2>$(LNAME2 BreakStatement, break 文)</h2>

$(GRAMMAR
$(I BreakStatement):
    $(B break) $(I Identifier)$(OPT) $(B ;)
)

	break文は、そのbreak文を含む文を終了します。

	breakは最内周のwhile,for,foreach,do,switch文を終了させ、
	それらの次にある文へ処理を移します。
        <p>

        break の後ろに $(I Identifier) が続いている時は、その $(I Identifier)
        はbreak文を囲うループやswitchのラベルでなければならず、
	break文によってそのループ等を終了します。
	そのラベルの付いたループ等が存在しなければエラーです。
        <p>

	関連するfinally節は全て実行され、
	同期オブジェクトは解放されます。
        <p>

        $(B 注:)
		finally節でreturn,throw文やfinallyの外へのgoto文が実行された場合、
		breakの目的地へは処理は到達しません。

---
for (i = 0; i < 10; i++)
{
  if (foo(i))
    break;
}
---

<h2>$(LNAME2 ReturnStatement, return 文)</h2>

$(GRAMMAR
$(I ReturnStatement):
    $(B return) $(EXPRESSION)$(OPT) $(B ;)
)

	返値を定めて、
	現在の関数を終了します。

	void以外の返値型を持つ関数ならば、
        $(EXPRESSION) が必要です。
        $(EXPRESSION)
        は暗黙の内に返値型へ変換されます。
        <p>

	void以外の返値型を持つ関数では、インラインアセンブラを含まない場合、
	最低でも１つのreturn, throw, あるいは
	assert(0) 文が必要です。
        <p>

$(COMMENT
        $(EXPRESSION) is allowed even if the function specifies
        a $(D_KEYWORD void) return type. The $(EXPRESSION) will be evaluated,
        but nothing will be returned.
        If the $(EXPRESSION) has no side effects, and the return
        type is $(D_KEYWORD void), then it is illegal.
        <p>
)
	関数が完全にreturnする前に、
	scope記憶クラスを持つオブジェクトが破棄され、
	finally節は実行され、
	scope(exit) 文が実行され、
	scope(success) 文も実行され、
	同期オブジェクトは
	解放されます。
        <p>

	finally節でfinally節を抜けるgoto文やthrow文、return文が実行された場合、
	関数からは戻りません。
        <p>

	out事後条件
        ($(DDLINK dbc, Contract Programming, 契約プログラミング) 参照)
	がある場合は、
        $(EXPRESSION) の評価後、
	関数が処理を戻す前にout節が実行されます。

---
int foo(int x)
{
    return x + 3;
}
---

<h2>$(LNAME2 GotoStatement, goto 文)</h2>

$(GRAMMAR
$(I GotoStatement):
    $(B goto) $(I Identifier) $(B ;)
    $(B goto) $(B default) $(B ;)
    $(B goto) $(B case) $(B ;)
    $(B goto) $(B case) $(EXPRESSION) $(B ;)
)

    ラベル $(I Identifier)
	の付いた文へ処理を移します。

---
  if (foo)
    goto L1;
  x = 3;
L1:
  x++;
---

        二番目の形 $(CODE goto default;) では、
        このgoto文を囲む最も内側の $(GLINK SwitchStatement)
        $(GLINK DefaultStatement) へ処理を移します。
        <p>

        三番目の形 $(CODE goto case;) では、
        このgoto文を囲む最も内側の $(GLINK SwitchStatement) における、
        直後の $(GLINK CaseStatement) へ処理を移します。
        <p>

        四番目の形 $(CODE goto case $(EXPRESSION);) では、
        このgoto文を囲む最も内側の $(GLINK SwitchStatement) における、
        $(EXPRESSION) とマッチする $(GLINK CaseStatement)
		へ処理を移します。

---
switch (x)
{
  case 3:
    goto case;
  case 4:
    goto default;
  case 5:
    goto case 4;
  default:
    x = 4;
    break;
}
---
	関連するfinally節は全て実行され、
	同期オブジェクトは解放されます。
        <p>

        初期化をスキップするような $(I GotoStatement)
        は不正です。

<h2>$(LNAME2 WithStatement, with 文)</h2>

	with文によって、
	同じオブジェクトへの参照の繰り返しを簡単化できます。

$(GRAMMAR
$(I WithStatement):
    $(B with) $(B $(LPAREN)) $(EXPRESSION) $(B $(RPAREN)) $(PSSCOPE)
    $(B with) $(B $(LPAREN)) $(GLINK2 template, Symbol) $(B $(RPAREN)) $(PSSCOPE)
    $(B with) $(B $(LPAREN)) $(GLINK2 template, TemplateInstance) $(B $(RPAREN)) $(PSSCOPE)
)

        $(EXPRESSION) はクラスの参照か、
	構造体のインスタンスへと評価されるものを指定します。
    $(I WithStatement) の本体では、シンボルを探す名前空間として、
	まずそのオブジェクトへの参照が用いられるようになります。次のようなwith文


--------------
$(B with) (expression)
{
  ...
  ident;
}
--------------

	は、意味的に次と同値です：

--------------
{
  Object tmp;
  tmp = expression;
  ...
  tmp.ident;
}
--------------

        $(P $(EXPRESSION) は一度しか実行されません。
        with文では、$(B this) や
        $(B super) の指す対象は変わりません。
        )

        $(P $(I Symbol) には、スコープかまたは $(I TemplateInstance) を指定し、
	対応するスコープからシンボルが検索されるようになります。
	例えば：
        )

--------------
struct Foo {
  alias int Y;
}
...
Y y;        // エラー、Y が未定義
with (Foo) {
  Y y;      // Foo.Y y; と同じ
}
--------------

$(V2
        $(P ローカルシンボルを同じ識別子で隠してしまうような、
	with 式の使い方は禁止されています。
	これは、オブジェクトの宣言に新しいメンバが追加された場合に、
	意図せずコードの動作を変えてしまうような危険を避けるためです。
        )
---
struct S {
  float x;
}

void main() {
  int x;
  S s;
  with (s) {
    x++;  // エラー。x の宣言を隠している
  }
}
---
)

<h2>$(LNAME2 SynchronizedStatement, synchronized 文)</h2>

        $(P synchronize文は、クリティカルセクションで他の文を包んで、
	複数のスレッドが同時に文を実行することを禁止します。
        )

$(GRAMMAR
$(I SynchronizedStatement):
    $(B synchronized) $(PSSCOPE)
    $(B synchronized $(LPAREN)) $(EXPRESSION) $(B $(RPAREN)) $(PSSCOPE)
)

        $(P 同時に高々１つのスレッドのみが
        $(I ScopeStatement) を実行することが許されます。
        )

        $(P どの mutex によってこの動作が実現されるかは、$(EXPRESSION).
        によって決まります。$(EXPRESSION) が指定されなかった場合、
	一つのsynchronized文につき一つグローバルなmutexが作成されます。
	異なるsynchronized文は異なるグローバルmutexを使用します。
        )

        $(P $(EXPRESSION) がある場合は、
	オブジェクトへの参照か、$(I Interface) の場合は
        $(I Interface) を実装するオブジェクトへとキャストで評価されます。
	使用される mutex はそのオブジェクトのインスタンス毎に用意されるもので、
	同じインスタンスを参照する全てのsynchronized文で共有されます。
        )

        $(P $(I ScopeStatement) が例外,goto,returnなどで終了した場合であっても、
	ロックは解除されます。
        )

        $(P 例：
        )

--------------
synchronized { ... }
--------------

        $(P これは標準的なクリティカルセクションの実装です。
        )

        $(P synchronized 文は再帰ロックに対応しています。つまり、
        synchronized でラップされた関数が自分自身を再帰呼び出しすることは可能で、
        期待した通りの動作になります:
        mutex は再帰の回数分のロックとアンロックを行います。
        )

<h2>$(LNAME2 TryStatement, try 文)</h2>

	例外処理は、try-catch-finally 文で行われます。

$(GRAMMAR
$(I TryStatement):
    $(B try) $(PSSCOPE) $(GLINK Catches)
    $(B try) $(PSSCOPE) $(GLINK Catches) $(GLINK FinallyStatement)
    $(B try) $(PSSCOPE) $(GLINK FinallyStatement)

$(GNAME Catches):
    $(GLINK LastCatch)
    $(GLINK Catch)
    $(GLINK Catch) $(I Catches)

$(GNAME LastCatch):
    $(B catch) $(PS0)

$(GNAME Catch):
    $(B catch $(LPAREN)) $(GLINK CatchParameter) $(B $(RPAREN)) $(PS0)

$(GNAME CatchParameter):
    $(GLINK2 declaration, BasicType) $(I Identifier)

$(GNAME FinallyStatement):
    $(B finally) $(PS0)
)

        $(P $(I CatchParameter) は型 T の変数 v を宣言します。
        $(V1 型 T は Object またはその派生クラスです。)
        $(V2 型 T は Throwable またはその派生クラスです。)
        型 T の派生クラスがthrowされた場合、
	そのオブジェクトで v が初期化され、
	catch文の中身が実行されます。
        )

        $(P 型Tだけが書かれ変数名vが無いときも、
	catch文は実行されます。
        )

        $(P もし $(I CatchParameter) の型T1が後ろに続く
	型T2の $(I Catch) を隠していた場合、つまりT1がT2と同じ型か
	T2の基底クラスの場合は、エラーになります。
        )

        $(P $(I LastCatch) は全ての例外をキャッチします。
        )

        $(P The $(I FinallyStatement) は、
        $(B try) $(I ScopeStatement) がgoto,break,continue,return,例外,
	正常終了のいずれで終わる場合も必ず実行されます。
        )
$(V1
        $(P 例外が $(I FinallyStatement) の中で発生し
        $(I FinallyStatement) が終わるまでに catch されなかった場合、
        新しい例外が古い例外を置き換えます:
        )
)
$(V2
        $(P 例外が $(I FinallyStatement) の中で発生し、元の例外が catch
	されるより前に catch されなかった場合、$(I Throwable) の $(I next)
	メンバによって前の例外にチェインされます。
	注意点として、他の多くのプログラミング言語と違って、
	D では新しい例外が古い例外を置き換えることはありません。
	代わりに、新しい例外は最初のれいがいによって引き起こされた '連鎖ダメージ' と見なされます。
	キャッチすべきは元々の例外の方で、そちらをキャッチすると、
	連鎖した例外もそこから取得できます。
        )

        $(P $(I Error) から派生したオブジェクトがthrowされたときの扱いは異なります。
	これらの例外は通常のチェインメカニズムを迂回し、
        $(I Error) のみがcatch可能となるように処理されます。
	それ以降に発生した例外のリストに加え $(I Error) には、迂回が起こったときには、
	一番最初に発生した元々の例外へのポインタも含まれます。
	これによって、例外階層全体が手に入ることになります。
    )
)
--------------
import std.stdio;

int main() {
  try {
    try {
      throw new Exception("first");
    }
    finally {
      writefln("finally");
      throw new Exception("second");
    }
  }
  catch(Exception e) {
    writefln("catch %s", e.msg);
  }
  writefln("done");
  return 0;
}
--------------

    これは次のような表示になります：
$(V1
$(CONSOLE
finally
catch second
done
)
)
$(V2
$(CONSOLE
finally
catch first
done
)
)

        $(P $(I FinallyStatement) から goto, break, continue, return
	などで脱出したり、gotoで中に飛び込んだりしてはいけません。
        )

        $(P $(I FinallyStatement) の中には $(I Catches) を含むことはできません。
	この制約は将来的には緩和される予定です。
        )

<h2>$(LNAME2 ThrowStatement, throw 文)</h2>

	例外を投げます。

$(GRAMMAR
$(I ThrowStatement):
    $(B throw) $(EXPRESSION) $(B ;)
)

        $(EXPRESSION) は $(V1 Object) $(V2 Throwable) 型の参照へと評価される必要があります。
        そのオブジェクトが例外として送出されます。

---
throw new Exception("message");
---

<h2>$(LNAME2 ScopeGuardStatement, スコープガード文)</h2>

$(GRAMMAR
$(I ScopeGuardStatement):
    $(B scope(exit)) $(PSCURLYSCOPE)
    $(B scope(success)) $(PSCURLYSCOPE)
    $(B scope(failure)) $(PSCURLYSCOPE)
)

        $(I ScopeGuardStatement) は、指定された $(PSCURLYSCOPE) を、
	この文自体が現れた箇所ではなく、
	現在のスコープの終了時に実行します。
        $(B scope(exit)) は、スコープから通常終了するときと例外で抜ける時の両方で
		$(PSCURLYSCOPE) を実行します。
        $(B scope(failure)) は、スコープを例外で抜ける時のみ
		$(PSCURLYSCOPE) を実行します。
        $(B scope(success)) は、スコープから通常終了するときのみ
		$(PSCURLYSCOPE) を実行します。
        <p>

        一つのスコープに複数の $(I ScopeGuardStatement) があった場合は、
	ソースコード文字列上で現れた順番の逆順で実行されます。
	そのスコープ終了時に破棄されるscopeインスタンスが存在する場合も、
	それらのデストラクタも、ソースコード上の逆順で $(I ScopeGuardStatement)
	の間に挟まって実行されます。

$(V1
----
writef("1"); {
  writef("2");
  scope(exit) writef("3");
  scope(exit) writef("4");
  writef("5");
}
writefln();
----
)
$(V2
----
write("1"); {
  write("2");
  scope(exit) write("3");
  scope(exit) write("4");
  write("5");
}
writeln();
----
)
	というプログラムは以下を出力します:

$(CONSOLE
12543
)

$(V1
----
{
  scope(exit) writef("1");
  scope(success) writef("2");
  scope(exit) writef("3");
  scope(success) writef("4");
}
writefln();
----
)
$(V2
----
{
  scope(exit) write("1");
  scope(success) write("2");
  scope(exit) write("3");
  scope(success) write("4");
}
writeln();
----
)
	の場合はこうなります:

$(CONSOLE
4321
)

$(V1
----
class Foo {
  this() { writef("0"); }
  ~this() { writef("1"); }
}

try {
  scope(exit) writef("2");
  scope(success) writef("3");
  scope Foo f = new Foo();
  scope(failure) writef("4");
  throw new Exception("msg");
  scope(exit) writef("5");
  scope(success) writef("6");
  scope(failure) writef("7");
}
catch (Exception e) {
}
writefln();
----
)
$(V2
----
class Foo {
  this() { write("0"); }
  ~this() { write("1"); }
}

try {
  scope(exit) write("2");
  scope(success) write("3");
  scope Foo f = new Foo();
  scope(failure) write("4");
  throw new Exception("msg");
  scope(exit) write("5");
  scope(success) write("6");
  scope(failure) write("7");
}
catch (Exception e) {
}
writeln();
----
)
	の時は:

$(CONSOLE
0412
)

        $(B scope(exit)) と $(B scope(success)) 文は、
	throw, goto, break, continue, return 文で終了したり、
	goto で中に飛び込んだりしてはいけません。

$(V1
<h2>$(LNAME2 VolatileStatement, volatile 文)</h2>

	volatile文の境界をまたいだコードの移動は行われません。

$(GRAMMAR
$(I VolatileStatement):
    $(B volatile) $(PSSEMI_PSCURLYSCOPE)
    $(B volatile) $(B ;)
)

        $(PSSEMI_PSCURLYSCOPE) 文が評価されます。
        この際、 $(PSSEMI_PSCURLYSCOPE) の前のメモリ書き込みは全て、
        $(PSSEMI_PSCURLYSCOPE) 内および後のメモリ読み込みよりも前に完了されます。
        $(PSSEMI_PSCURLYSCOPE) より後のメモリ読み込みは全て、
        $(PSSEMI_PSCURLYSCOPE) 内および前のメモリ書き込みが完了した後に実行されます。
        <p>

	volatile文はアトミック性は保証しません。
	その用途には synchronized 文を使います。
)

<h2>$(LNAME2 asm, asm 文)</h2>

	インラインアセンブラはasm文によってサポートされます。

$(GRAMMAR
$(GNAME AsmStatement):
    $(B asm { })
    $(B asm {) $(GLINK AsmInstructionList) $(B })

$(GNAME AsmInstructionList):
    $(GLINK2 iasm, AsmInstruction) $(B ;)
    $(GLINK2 iasm, AsmInstruction) $(B ;) $(I AsmInstructionList)
)

	asm文は、アセンブラ言語の命令を直接使うことを可能にします。
	これによって、外部のアセンブラを用いずにCPUの特殊命令の
	実行などが簡単に実現できます。
	関数の呼び出し規約やスタックの処理などは、
	Dコンパイラが行います。
        <p>

	命令のフォーマットは、
	CPUの命令セットに大きく依存しますので、
        $(DDLINK iasm, Inline Assembler, 実装ごとに定義)
	されています。
	しかし、フォーマットは次の規約に従っています：

        $(UL
        $(LI D言語と同じトークンを使う。)
        $(LI コメント形式はDのコメント形式と合わせる。)
        $(LI アセンブラ命令は行末ではなく ;
		で終わるものとする。)
        )

	これらのルールは、Dのソースコードが構文解析,意味解析と独立に
	確実にトークン分割できるために定められています。
        <p>

	例えばIntelプラットホームでは：

--------------
int x = 3;
asm {
  mov EAX,x; //  xをロードしてEAXレジスタに入れる
}
--------------

	インラインアセンブラによってハードウェアの直接制御も可能です：

--------------
int gethardware() {
  asm {
    mov EAX, dword ptr 0x1234;
  }
}
--------------

	Dの実装によっては、例えばDからCへのトランスレータなどでは、
	インラインアセンブラは意味をなしません。この場合は、
	インラインアセンブラが実装されている必要があります。これを確かめるには、version文を使うことができます：

--------------
version (D_InlineAsm_X86)
{
  asm {
    ...
  }
}
else
{
  /* ... なんらかの代替案 ... */
}
--------------

        $(P 意味的に連続している $(I AsmStatement) 文の間には、
	余計な命令
	（レジスタの退避や復元等）がコンパイラによって勝手に挿入されることはありません。
        )

<h2>$(LNAME2 PragmaStatement, pragma 文)</h2>

$(GRAMMAR
$(I PragmaStatement):
    $(GLINK2 pragma, Pragma) $(PSSEMI)
)

<h2>$(LNAME2 MixinStatement, mixin 文)</h2>

$(GRAMMAR
$(I MixinStatement):
    $(B mixin) $(B $(LPAREN)) $(ASSIGNEXPRESSION) $(B $(RPAREN)) $(B ;)
)

        $(P $(ASSIGNEXPRESSION)
		にはコンパイル時に定数文字列に評価される式を指定します。
        文字列の中身は文法的に妥当な
        $(GLINK StatementList) でなければならず、そのような文の列としてコンパイルされます。
        )

---
import std.stdio;

void main() {
  int j;
  mixin("
    int x = 3;
    for (int i = 0; i < 3; i++)
      writefln(x + i, ++j);
    ");    // ok

  const char[] s = "int y;";
  mixin(s);  // ok
  y = 4;     // ok, mixin が y を宣言している

  char[] t = "y = 3;";
  mixin(t);  // エラー、t はコンパイル時評価できない

  mixin("y =") 4; // エラー、文字列は完全な文でないといけない

  mixin("y =" ~ "4;");  // ok
}
---

)

Macros:
        TITLE=文
        WIKI=Statement
        CATEGORY_SPEC=$0
        EXPRESSION=$(GLINK2 expression, Expression)
        PSSEMI_PSCURLYSCOPE=$(GLINK Statement)
        PSSEMI_PSCURLYSCOPE_LIST=$(GLINK ScopeStatementList)
        PS0=$(GLINK NoScopeNonEmptyStatement)
        PSSCOPE=$(GLINK ScopeStatement)
        PSCURLY=$(GLINK BlockStatement)
        PSSEMI=$(GLINK NoScopeStatement)
        PSCURLY_PSSCOPE=$(GLINK ScopeBlockStatement)
        PSCURLYSCOPE=$(GLINK NonEmptyOrScopeBlockStatement)
        FOO=

