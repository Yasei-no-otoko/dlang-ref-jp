Ddoc

$(D_S Windowsプログラミング,

	$(P このページは、Windows上でのDの実装に関して述べています。
	当然ながら、
	Windows特有のDの機能は他のプラットフォームでは使用できません。
	)

	$(P Cの:)

$(CCODE
#include &lt;windows.h&gt;
)
	$(P の代わりに、Dでは以下を使用します:)

$(V1
--------------------
import std.c.windows.windows;
--------------------
)
$(V2
--------------------
import core.sys.windows.windows;
--------------------
)

<h2>呼び出し規約</h2>

	$(P Cでは、Windows APIの呼び出し規約は $(CODE __stdcall) です。
	Dでは単純に:
	)

--------------------
extern (Windows)
{
	/* ... 関数宣言 ... */
}
--------------------


	$(P リンク属性Windowsによって、呼び出し規約と名前のmanglingの両方が、
	Windowsと互換性のあるものになります。
	)

	$(P Cで $(CODE __declspec(dllimport)) や
	$(CODE __declspec(dllexport)) と書いていたものについては、$(CODE export) 属性を使ってください:
	)

--------------------
export void func(int foo);
--------------------

	$(P 関数本体がなければ、importされます。
	関数本体があれば、exportされます。
	)

<h2>Windows 実行ファイル</h2>

	$(P Windows GUI アプリケーションを D で書くことができます。
	サンプルは $(D $(DMDDIR)\samples\d\winsamp.d) などに幾つかあります。
	)

	$(P 以下が注意点です:)

	$(OL

	$(LI エントリポイントとして、$(CODE main) 関数ではなく
	$(CODE WinMain)  関数が必要です。
	)

	$(LI $(CODE WinMain) の内容は以下の通りです:
$(V1
--------------------
import core.runtime;
import std.c.windows.windows;
import std.string;

extern (Windows)
int WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
            LPSTR lpCmdLine, int nCmdShow)
{
    int result;

    void exceptionHandler(Throwable e) {
        throw e;
    }

    try
    {
        Runtime.initialize(&exceptionHandler);
        result = myWinMain(hInstance, hPrevInstance, lpCmdLine, nCmdShow);
        Runtime.terminate(&exceptionHandler);
    }
    catch (Throwable e) // キャッチされていない例外を全てキャッチ
    {
        MessageBoxA(null, e.toString().toStringz, "Error",
                    MB_OK | MB_ICONEXCLAMATION);
        result = 0;     // 失敗
    }

  return result;
}

int myWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
              LPSTR lpCmdLine, int nCmdShow)
{
    // ... ユーザーコードをここに挿入 ...
    return 0;
}
--------------------
)
$(V2
--------------------
import core.runtime;
import core.sys.windows.windows;
import std.string;

extern (Windows)
int WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
            LPSTR lpCmdLine, int nCmdShow)
{
    int result;

    void exceptionHandler(Throwable e) {
        throw e;
    }

    try
    {
        Runtime.initialize(&exceptionHandler);
        result = myWinMain(hInstance, hPrevInstance, lpCmdLine, nCmdShow);
        Runtime.terminate(&exceptionHandler);
    }
    catch (Throwable e) // キャッチされていない例外を全てキャッチ
    {
        MessageBoxA(null, e.toString().toStringz(), "Error",
                    MB_OK | MB_ICONEXCLAMATION);
        result = 0;     // 失敗
    }

  return result;
}

int myWinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance,
              LPSTR lpCmdLine, int nCmdShow)
{
    // ... ユーザーコードをここに挿入 ...
    return 0;
}
--------------------
)

	$(D myWinMain()) 関数が、ユーザのコードを書くところです。
	$(D WinMain) 関数の残りは全て、Dの実行時システムの初期化と終了の
	決まり文句です。
	)

	$(LI 最低次の２行を含んだ、
	$(CODE .def)
	($(LINK2 http://www.digitalmars.com/ctg/ctgDefFiles.html, モジュール定義ファイル))
	が必要です:

$(MODDEFFILE
EXETYPE NT
SUBSYSTEM WINDOWS
)

	これがないと、Win32は、アプリケーションの実行時に
	常にコンソールウインドウを開こうとします。
	)

	$(LI $(D WinMain()) の存在はコンパイラが認識し、
		$(LINK2 http://www.digitalmars.com/ctg/acrtused.html, __acrtused_dll)
		と phobos.lib
		ランタイムライブラリへの参照を自動的に追加します。
	)

	)

<h2>Windows プログラミングの例</h2>

140 を超える Windows での D でのコード例が
$(LINK2 https://github.com/AndrejMitrovic/DWindowsProgramming, Github レポジトリ) で公開されています。

)



Macros:
	TITLE=Windowsプログラミング
	WIKI=Windows
	CATEGORY_HOWTOS=$0
