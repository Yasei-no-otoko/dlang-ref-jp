Ddoc

$(D_S タプル,

	$(P タプルとは、要素の列です。要素としては、
	型や、式、alias を持つことができます。
	各タプルの要素数はコンパイル時に固定され、
	実行時に変更することはできません。
	)

	$(P タプルは、構造体と配列の、両方の特徴を備えています。
	構造体のように、
	タプルの各要素は異なった型を持つことができます。
	一方で、配列のように要素に添え字でアクセスすることができます。
	)

	$(P さて、では、タプルを使うにはどうすればよいのでしょうか？
	特にタプルリテラルなどはありません。可変個引数テンプレートがタプルを作るので、
	これを利用してタプル生成テンプレートを定義することが可能です：
	)

---
template Tuple(E...)
{
    alias E Tuple;
}
---

	$(P これは次のように使うことができます:)

---
Tuple!(int, long, float)	// 3つの型のタプル
Tuple!(3, 7, 'c')		// 3つの式のタプル
Tuple!(int, 8)			// 型と式の混合タプル
---

	$(P タプルをシンボルで参照するには、aliasを使います:)

---
alias Tuple!(float, float, 3) TP; // TP はfloat二つと3のタプル
---

	$(P タプルはテンプレートの引数とすることができて、その場合、
	引数のリストへと展開 ($(SINGLEQUOTE flattened)) されます。
	この動作を使うと、既存のタプルに要素を追加したり、
	別のタプルを結合するのは簡単です:)

---
alias Tuple!(TP, 8) TR;  // TR は float,float,3,8
alias Tuple!(TP, TP) TS; // TS は float,float,3,float,float,3
---

	$(P Tupプルには配列と共通の特徴が多くあります。
	まず、タプルの要素数は、
	$(B .length) プロパティで取得できます:)

---
TP.length	// 3になる
---

	$(P タプルは添え字アクセスできます:)

---
TP[1] f = TP[2];	// f はfloat型と宣言され、3に初期化される
---

	$(P さらにスライスも取れます:)

---
alias TP[0..length-1] TQ; // TQ は Tuple!(float, float) と同じ
---

	$(P そう、[ ] の中では $(B length) が定義されているのも同じです。
	ただし、制限がひとつあります。
	添え字やスライスの値はコンパイル時に評価される定数でなければなりません。)

---
void foo(int i)
{
    TQ[i] x;		// エラー。i は定数でない
}
---

	$(P これを使うと、タプルの先頭 $(SINGLEQUOTE head) と $(SINGLEQUOTE tail)
	を取り出すのも簡単です。先頭は単純に TP[0] で、残りは
	TP[1 .. length] です。
	head と tail ができたので、
	あとは条件コンパイルを少し組み合わせると、
	テンプレートによる古典的な再帰アルゴリズムの実装ができるようになります。
	例として、次のテンプレートは、
	型引数 $(I T) の最初の出現を型リスト $(I TL)
	から取り除いた残りを返します:
	)
---
template Erase(T, TL...)
{
    static if (TL.length == 0)
	// 長さ 0 の場合。自分自身を返す
        alias TL Erase;
    else static if (is(T == TL[0]))
	// タプルの先頭要素にマッチ。残りを返す
        alias TL[1 .. length] Erase;
    else
	// 先頭はマッチせず。headと、再帰操作を適用した残りを結合
        alias Tuple!(TL[0], Erase!(T, TL[1 .. length])) Erase;
}
---

<h3>型タプル</h3>

	$(P タプルの要素が全て型であるとき、
	型タプル（$(I TypeTuple)）と呼ばれます。
	（型リストと呼ばれることもあります。）
	関数の引数リストは型のリストなので、
	そこから型タプルを取り出すことができます。
	たとえば、$(ISEXPRESSION) を使う方法があります:
	)

---
int foo(int x, long y);

...
static if (is(foo P == function))
    alias P TP;
// TP は Tuple!(int, long) と同じ
---

	$(P これの汎用版が
	$(LINK2 phobos/std_traits.html, std.traits).ParameterTypeTuple テンプレートです:
	)

---
import std.traits;

...
alias ParameterTypeTuple!(foo) TP;	// TP はタプル (int, long)
---

	$(P 逆に $(I TypeTuple) で関数を宣言することもできます:)

---
float bar(TP);	// float bar(int, long) と同じ
---

	$(P 暗黙の関数テンプレートのインスタンス化が行われる場合には、
	引数型を表す型タプルも推論されます:
	)
---
int foo(int x, long y);

void Bar(R, P...)(R function(P))
{
    writefln("return type is ", typeid(R));
    writefln("parameter types are ", typeid(P));
}

...
Bar(&foo);
---

	$(P 出力はこうなります:)

$(CONSOLE
return type is int
parameter types are (int,long)
)

	$(P この推論を使うことで、
	任意の型と任意の個数の引数を持つ関数を書くことができます:)

---
void Abc(P...)(P p)
{
    writefln("parameter types are ", typeid(P));
}

Abc(3, 7L, 6.8);
---

	$(P 出力:)

$(CONSOLE
parameter types are (int,long,double)
)

	$(P この辺りに関してもっと詳しくは、
	$(LINK2 variadic-function-templates.html, 可変個引数テンプレート) をどうぞ。
	)


<h3>式タプル</h3>

	$(P タプルの要素が全て式であるとき、
	式タプル（$(I ExpressionTuple).）と呼ばれます。
	先ほどのTupleテンプレートで作成することができます:
	)

---
alias Tuple!(3, 7L, 6.8) ET;

...
writefln(ET);            // 表示は 376.8
writefln(ET[1]);         // 表示は 7
writefln(ET[1..length]); // 表示は 76.8
---

	$(P 配列リテラルを作るのに応用することも可能です:)

---
alias Tuple!(3, 7, 6) AT;

...
int[] a = [AT];		// [3,7,6] と同じ
---

	$(P 構造体やクラスのデータフィールドは、
	$(B .tupleof)
	プロパティを使うと式タプルに変換することができます:)

---
struct S { int x; long y; }

void foo(int a, long b)
{
    writefln(a, b);
}

...
S s;
s.x = 7;
s.y = 8;
foo(s.x, s.y);	// 表示は 78
foo(s.tupleof);	// 表示は 78
s.tupleof[1] = 9;
s.tupleof[0] = 10;
foo(s.tupleof); // 表示は 109
s.tupleof[2] = 11;  // エラー。S には3つめのフィールドはない
---

	$(P $(B typeof) を使うと、
	構造体から、データフィールドの型のタプルを作ることができます:)

---
writefln(typeid(typeof(S.tupleof)));	// 表示は (int,long)
---

	$(P これは
	$(LINK2 phobos/std_traits.html, std.traits).FieldTypeTuple テンプレートとしてカプセル化されています。
	)

<h3>ループ</h3>

	$(P 関数型プログラミングのような head-tail スタイルの方法で
	タプルを操作することはもちろん可能ですが、ループが使えるともっと便利です。
	$(I ForeachStatement) では、$(I TypeTuple) と
	$(I ExpressionTuple) 上をループすることができます。
	)

---
alias Tuple!(int, long, float) TL;
foreach (i, T; TL)
    writefln("TL[%d] = ", i, typeid(T));

alias Tuple!(3, 7L, 6.8) ET;
foreach (i, E; ET)
    writefln("ET[%d] = ", i, E);
---

	$(P 表示は:)

$(CONSOLE
TL[0] = int
TL[1] = long
TL[2] = float
ET[0] = 3
ET[1] = 7
ET[2] = 6.8
)

<h3>タプルの宣言</h3>

	$(P $(I 型タプル) を型に持つように宣言された変数は
	$(I 式タプル)  になります)

---
alias Tuple!(int, long) TL;

void foo(TL tl)
{
    writefln(tl, tl[1]);
}

foo(1, 6L);	// 表示は 166
---

<h3>全部組み合わせると...</h3>

	$(P これらの機能を組み合わせると、
	関数の引数を全てカプセル化して、
	その引数で元の関数を呼び出すようなdelegateを返す
	CurryAll テンプレートが実装できます。)

---
import std.stdio;

R delegate() CurryAll(Dummy=void, R, U...)(R function(U) dg, U args)
{
    struct Foo
    {
	typeof(dg) dg_m;
	U args_m;

	R bar()
	{
	    return dg_m(args_m);
	}
    }

    Foo* f = new Foo;
    f.dg_m = dg;
    foreach (i, arg; args)
	f.args_m[i] = arg;
    return &f.bar;
}

R delegate() CurryAll(R, U...)(R delegate(U) dg, U args)
{
    struct Foo
    {
	typeof(dg) dg_m;
	U args_m;

	R bar()
	{
	    return dg_m(args_m);
	}
    }

    Foo* f = new Foo;
    f.dg_m = dg;
    foreach (i, arg; args)
	f.args_m[i] = arg;
    return &f.bar;
}


void main()
{
    static int plus(int x, int y, int z)
    {
	return x + y + z;
    }

    auto plus_two = CurryAll(&plus, 2, 3, 4);
    writefln("%d", plus_two());
    assert(plus_two() == 9);

    int minus(int x, int y, int z)
    {
	return x + y + z;
    }

    auto minus_two = CurryAll(&minus, 7, 8, 9);
    writefln("%d", minus_two());
    assert(minus_two() == 24);
}
---

	$(P $(I Dummy) 引数が必要なのは、
	同じ引数リストで二つのテンプレートをオーバーロードすることはできないためです。
	一つダミー引数を増やして、区別をつけています。
	)

<h3>今後の方向</h3>

	$(UL
	$(LI 関数からタプルを返せるように)
	$(LI タプルに対する演算子 =, +=, など)
	$(LI タプルのプロパティ $(B .init) など
	（プロパティを各要素に適用する処理）)
	)

)

Macros:
	TITLE=タプル
	WIKI=Tuples
	CATEGORY_ARTICLES=$0
META_KEYWORDS=D Programming Language, template metaprogramming,
variadic templates, tuples, currying
META_DESCRIPTION=Tuples in the D programming language
