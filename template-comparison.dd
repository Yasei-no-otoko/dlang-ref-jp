Ddoc

$(COMMUNITY テンプレートの比較,

$(PC++ がテンプレートとテンプレートメタプログラミングの先駆けとなり、
C++0x へと改善が進んでいます。
プログラミング言語 D は、
C++ での経験に基づいて、テンプレートを完全に設計し直した最初の言語です。
C++0x はこの記事の執筆時点ではまだ批准された標準規格ではないため、
C++ への変更提案の内容は変わることがあります。)

	<table border=2 cellpadding=4 cellspacing=0 class="comp">
	<caption>テンプレート比較表</caption>

	<thead>
	$(TR
	$(TH 機能)
	$(TH D)
	$(TH C++98)
	$(TH C++0x)
	)
	</thead>

	<tbody>

	$(TR
	$(TD 引数の渡し方)
	$(TD !( ) を使う: Foo!(int))
	$(TD &lt; &gt; を使う: Foo&lt;int&gt;)
	$(TD 変更なし)
	)

	$(TR
	$(TD クラステンプレート)
	$(TD Yes:
---
class Foo(T)
{
  T x;
}
---
)
	$(TD Yes:
$(CPPCODE2
template&lt;class T&gt;
  class Foo
{
  T x;
};
)
)
	$(TD 変更なし)
	)

	$(TR
	$(TD 関数テンプレート)
	$(TD Yes:
---
T foo(T)(T i)
{
  ...
}
---
)
	$(TD Yes:
$(CPPCODE2
template&lt;class T&gt;
  T foo(T i)
{
  ...
}
)
)
	$(TD 変更なし)
	)

	$(TR
	$(TD メンバテンプレート)
	$(TD Yes)
	$(TD Yes)
	$(TD 変更なし)
	)

	$(TR
	$(TD コンストラクタテンプレート)
	$(TD No)
	$(TD Yes)
	$(TD 変更なし)
	)

	$(TR
	$(TD 任意の宣言のパラメタ化)
	$(TD Yes。クラス、関数、typedef、
	変数、enum などがパラメタ化できます。
	例:
---
template Foo(T)
{
  static T* p;
}
---
)
	$(TD No。クラスと関数のみ)
	$(TD 変更なし)
	)

	$(TR
	$(TD typedefテンプレート: テンプレート引数を使った宣言への
	alias を作る)
	$(TD Yes:
---
class Foo(T, U) { }
template MyFoo(T)
{
  alias Foo!(T, int) MyFoo;
}
MyFoo!(uint) f;
---
)
	$(TD No)
	$(TD Yes:
$(CPPCODE2
template&lt;class T, class U&gt; class Foo { };
template&lt;class T&gt; using MyFoo = Foo&lt;T, int&gt;;
MyFoo&lt;unsigned&gt; f;
)
)
	)


	$(TR
	$(TD シーケンス・コンストラクタ)
	$(TD No)
	$(TD No)
	$(TD Yes:
$(CPPCODE2
Foo&lt;double&gt; f = { 1.2, 3, 6.8 };
)
)
	)

	$(TR
	$(TD Concept)
$(V1
	$(TD No。ただしほぼ同じ効果が
	 $(GLINK2 version, StaticIfCondition) と
	 $(LINK2 version.html#StaticAssert, static assert) で得られます)
)
$(V2
	$(TD Yes: $(LINK2 cpp0x.html#concepts, テンプレート制約))
)
	$(TD No)
	$(TD Yes: $(LINK2 http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2005/n1849.pdf, Concepts for C++0x N1849))
	)


	$(TR
	$(TD 再帰テンプレート)
	$(TD Yes:
---
template factorial(int n)
{
  const factorial =
     n * factorial!(n-1);
}
template factorial(int n : 1)
{
  const factorial = 1;
}
---
)
	$(TD Yes:
$(CPPCODE2
template&lt;int n&gt; class factorial
{
  public:
    enum
    {
      result =
         n * factorial&lt;n-1&gt;::result
    }; 
};
template&lt;&gt; class factorial&lt;1&gt;
{
  public:
    enum { result = 1 };
};
)
)
	$(TD 変更なし)
	)

	$(TR
	$(TD テンプレート引数に基づく
	条件コンパイル)
	$(TD Yes:
---
template factorial(int n)
{
  static if (n == 1)
    const factorial = 1;
  else
    const factorial =
       n * factorial!(n-1);
}
---
)
	$(TD No:
$(CPPCODE2
template&lt;int n&gt; class factorial
{
  public:
    enum
    {
#if (n == 1) // $(ERROR)
      result = 1;
#else
      result =
         n * factorial&lt;n-1&gt;::result
#endif
    }; 
};
)
)
	$(TD 変更なし)
	)

	$(TR
	$(TD テンプレートの(定義なしの)宣言)
	$(TD No)
	$(TD Yes:
$(CPPCODE2
template&lt;class T&gt;
  class Foo;
)
)
	$(TD 変更なし)
	)

	$(TR
	$(TD 同じ引数のテンプレートのグループ化)
	$(TD Yes:
---
template Foo(T, U)
{
  class Bar { ... }
  T foo(T t, U u) { ... }
}
Foo!(int,long).Bar b;
return Foo!(char,int).foo('c',3);
---
)
	$(TD No。それぞれ分離して書きます:
$(CPPCODE2
template&lt;class T, class U&gt;
  class Foo_Bar { ... };
template&lt;class T, class U&gt;
  T Foo_foo(T t, U u) { ... };
Foo_Bar&lt;int,long&gt; b;
return Foo_foo&lt;char,int&gt('c',3);
)
)
	$(TD 変更なし)
	)

	$(TR
	$(TD 関数のコンパイル時実行)
	$(TD $(DDSUBLINK function, interpretation, Yes):
---
int factorial(int i)
{ if (i == 0)
    return 1;
  else
    return i * factorial(i - 1);
}
static f = factorial(6);
---
	)
	$(TD No)
	$(TD パラメタでの名前付き定数式:
	   $(LINK2 http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2006/n1972.pdf, Generalized Constant Expressions N1972))
	)

	$(TR
	$(TH 引数)
	$(TH D)
	$(TH C++98)
	$(TH C++0x)
	)

	$(TR
	$(TD 型引数)
	$(TD Yes:
---
class Foo(T)
{
  T x;
}
Foo!(int) f;
---
)
	$(TD Yes:
$(CPPCODE2
template&lt;class T&gt;
  class Foo
{
  T x;
};
Foo&lt;int&gt; f;
)
)
	$(TD 変更なし)
	)

	$(TR
	$(TD 整数引数)
	$(TD Yes:
---
void foo(int i)()
{
  int v = i;
}
---
)
	$(TD Yes:
$(CPPCODE2
template&lt;int i&gt;
    void foo()
{
  int v = i;
}
)
)
	$(TD 変更なし)
	)

	$(TR
	$(TD ポインタ引数)
	$(TD Yes。オブジェクトか関数へのポインタ)
	$(TD Yes。オブジェクトか関数へのポインタ)
	$(TD 変更なし)
	)

	$(TR
	$(TD 参照引数)
	$(TD No。D には参照型がありません)
	$(TD Yes:
$(CPPCODE2
template&lt;double& D&gt;
    void foo()
{
  double y = D;
}
)
)
	$(TD 変更なし)
	)

	$(TR
	$(TD メンバポインタ引数)
	$(TD No。D にはメンバへのポインタがありません。代わりに
	  $(LINK2 type.html#delegates, delegate)
	  があって、これは引数として使えます)
	$(TD Yes)
	$(TD 変更なし)
	)

	$(TR
	$(TD テンプレートテンプレート引数)
	$(TD Yes:
---
class Foo(T, alias C)
{
  C!(T) x;
}
---
)
	$(TD Yes:
$(CPPCODE2
template&lt;class T,
         template&lt;class U&gt; class C&gt;
    class Foo
{
  C&lt;T&gt; x;
};
)
)
	$(TD 変更なし)
	)

	$(TR
	$(TD alias 引数)
	$(TD Yes。任意のシンボルをテンプレート引数にaliasとして渡すことが可能:
---
void bar(int);
void bar(double);
void foo(T, alias S)(T t)
{
  S(t);
}
// calls bar(double)
foo!(double, bar)(1);
---
)
	$(TD No)
	$(TD 変更なし)
	)

	$(TR
	$(TD 浮動小数点数引数)
	$(TD Yes:
---
class Foo(double D)
{
  double x = D;
}
...
Foo!(1.6) F;
---
)
	$(TD No)
	$(TD 変更なし)
	)

	$(TR
	$(TD 文字列引数)
	$(TD Yes:
---
void foo(char[] format)(int i)
{
  writefln(format, i);
}
...
foo!("i = %s")(3);
---
)
	$(TD No)
	$(TD 変更なし)
	)

	$(TR
	$(TD ローカルクラス引数)
	$(TD Yes)
	$(TD No)
	$(TD Issue N1945)
	)

	$(TR
	$(TD ローカル変数引数)
	$(TD Yes)
	$(TD No)
	$(TD 変更なし)
	)

	$(TR
	$(TD 引数のデフォルト値)
	$(TD Yes:
---
class Foo(T = int)
{
  T x;
}
---
)
	$(TD Yes:
$(CPPCODE2
template&lt;class T = int&gt;
  class Foo
{
  T x;
};
)
)
	$(TD 変更なし)
	)

	$(TR
	$(TD 可変個引数)
	$(TD Yes, $(LINK2 variadic-function-templates.html, Variadic Templates):
---
void print(A...)(A a)
{
    foreach(t; a)
	writefln(t);
}
---
)
	$(TD No)
	$(TD $(LINK2 http://www.osl.iu.edu/~dgregor/cpp/variadic-templates.pdf, Variadic Templates N2080))
	)

	$(TR
	$(TH 特殊化)
	$(TH D)
	$(TH C++98)
	$(TH C++0x)
	)

	$(TR
	$(TD 明示特殊化)
	$(TD Yes:
---
class Foo(T : int)
{
  T x;
}
---
)
	$(TD Yes:
$(CPPCODE2
template&lt;&gt;
  class Foo&lt;int&gt;
{
  int x;
};
)
)
	$(TD 変更なし)
	)

	$(TR
	$(TD 部分特殊化)
	$(TD Yes:
---
class Foo(T : T*, U)
{
  T x;
}
---
)
	$(TD Yes:
$(CPPCODE2
template&lt;class T, class U&gt;
  class Foo&lt;T*, U&gt;
{
  T x;
};
)
)
	$(TD 変更なし)
	)

	$(TR
	$(TD 複数パラメタによる部分特殊化)
	$(TD Yes:
---
class Foo(T : Bar!(T, U), U)
{
  ...
}
---
)
	$(TD Yes:
$(CPPCODE2
template&lt;class T, class U&gt;
    class Foo&lt; Bar&lt;T,U&gt; &gt;
{
  ...
};
)
)
	$(TD 変更なし)
	)

	$(TR
	$(TD プライマリテンプレートなしの特殊化)
	$(TD Yes)
	$(TD No)
	$(TD 変更なし)
	)

	$(TR
	$(TH その他)
	$(TH D)
	$(TH C++98)
	$(TH C++0x)
	)

	$(TR
	$(TD テンプレートのexport)
	$(TD Yes, モジュールを導入した自然な帰結です)
	$(TD Yes, ただしEDGのフロントエンドを使ったコンパイラのみ)
	$(TD 変更なし)
	)

	$(TR
	$(TD $(SFINAE))
	$(TD Yes)
	$(TD Yes)
	$(TD 変更なし)
	)

	$(TR
	$(TD インスタンス化の前のテンプレート定義本体の構文解析)
	$(TD Yes)
	$(TD 標準では要求されていないが、いくつかの実装はそうなっている)
	$(TD 変更なし)
	)

	$(TR
	$(TD 関数テンプレートと関数のオーバーロード)
	$(TD No, しかし、同等の効果が
	明示的に特殊化したテンプレートで実現できます:
---
void foo(T)(T t) { }
void foo(T:int)(int t) { }
---
)
	$(TD Yes:
$(CPPCODE2
template&lt;class T&gt;
  void foo(T i) { }
void foo(int t) { }
)
)
	$(TD 変更なし)
	)

	$(TR
	$(TD 関数テンプレートの暗黙のインスタンス化)
	$(TD Yes)
	$(TD Yes)
	$(TD 変更なし)
	)

	$(TR
	$(TD 定義ではなくインスタンス化のスコープでの
	  テンプレートの評価)
	$(TD Yes, $(LINK2 mixin.html, mixin))
	$(TD No, マクロで真似をすることは可能)
	$(TD 変更なし)
	)

	$(TR
	$(TH 構文解析面での特徴)
	$(TH D)
	$(TH C++98)
	$(TH C++0x)
	)



	$(TR
	$(TD 文脈自由文法)
	$(TD Yes:
---
class Foo!(int i)
{
   ...
}
Foo!(3 $(B >) 4) f;
---
)
	$(TD No:
$(CPPCODE2
template&lt;int i&gt; class Foo
{
   ...
};
Foo&lt;3 $(B &gt;) 4&gt; f; // $(ERROR)
)
)
	$(TD 変更なし)
	)


	$(TR
	$(TD テンプレート引数と他の演算子の区別)
	$(TD Yes:
---
class Foo!(T)
{
   ...
}
class Bar!(int i)
{
   ...
}
Foo!(Bar!(1)) x1;
---
)
	$(TD No:
$(CPPCODE2
template&lt;class T&gt; class Foo
{
   ...
};
template&lt;int i&gt; class Bar
{
   ...
};
Foo&lt;Bar&lt;1&gt;&gt; x1; // $(ERROR)
Foo&lt;Bar&lt;1&gt; &gt; x2;
)
)
	$(TD $(LINK2 http://www.open-std.org/JTC1/SC22/WG21/docs/papers/2005/n1757.html, Right Angle Brackets N1757)
	で部分的に改善
	)

	)


	$(TR
	$(TD テンプレート引数の再宣言)
	$(TD Yes:
---
class Foo(T)
{
  int T;
  void foo()
  {
    int T;
  }
}
---
)
	$(TD No:
$(CPPCODE2
template&lt;class T&gt;
  class Foo
{
  int T; // $(ERROR)
  void foo()
  {
    int T; // $(ERROR)
  }
};
)
)
	$(TD 変更なし)
	)

	$(TR
	$(TD 基底クラスの依存型のlookup)
	$(TD Yes:
---
class Foo(T)
{
  typedef int $(B A);
}
class Bar(T) : Foo(T)
{
  $(B A) x;
}
---
)
	$(TD No:
$(CPPCODE2
template&lt;class T&gt;
  class Foo
{
  public:
    typedef int $(B A);
};
template&lt;class T&gt;
  class Bar : Foo&lt;T&gt;
{
  public:
    $(B A) x; // $(ERROR)
};
)
)
	$(TD 変更なし)
	)




	$(TR
	$(TD 前方参照)
	$(TD Yes:
---
int $(B g)(void *);

class Foo(T)
{
  int foo()
  {
    return $(B g)(1);
  }
}

int $(B g)(int i);
---
)
	$(TD No:
$(CPPCODE2
int $(B g)(void *);

template&lt;class T&gt;
  class Foo
{
  int foo()
  {
    return $(B g)(1); // $(ERROR)
  }
};

int $(B g)(int i);
)
)
	$(TD 変更なし)
	)


	$(TR
	$(TD ヒントなしでメンバテンプレートの構文解析可能)
	$(TD Yes:
---
class Foo
{
    Foo bar!(int I)();
}
void abd(T)(T f)
{
  T f1 = f.bar!(3)();
}
---
)
	$(TD No:
$(CPPCODE2
class Foo
{
  public:
    template&lt;int&gt; Foo *bar();
};
template&lt;class T&gt; void abc(T *f)
{
  T *f1 = f-&gt;bar&lt;3&gt;(); // $(ERROR)
  T *f2 = f-&gt;$(B template) bar&lt;3&gt;();
}
)
)
	$(TD 変更なし)
	)


	$(TR
	$(TD ヒントなしで依存メンバ型が構文解析可能)
	$(TD Yes:
---
class Foo(T)
{
  T.A* a1;
}
---
)
	$(TD No:
$(CPPCODE2
template<class T> class Foo
{
  public:
    T::A *a1; // $(ERROR)
    $(B typename) T::A *a2;
};
)
)
	$(TD 変更なし)
	)

	</tbody>
	</table>

)

Macros:
	TITLE=テンプレートの比較
	WIKI=TemplateComparison
	NO=<td class="compNo">No</td>
	NO1=<td class="compNo"><a href="$1">No</a></td>
	YES=<td class="compYes">Yes</td>
	YES1=<td class="compYes"><a href="$1">Yes</a></td>
	D_CODE = <pre class="d_code2">$0</pre>
	CPPCODE2 = <pre class="cppcode2">$0</pre>
	ERROR = $(RED $(B error))
META_KEYWORDS=D Programming Language, template metaprogramming,
variadic templates, type deduction, dependent base class
META_DESCRIPTION=Comparison of templates between the
D programming language, C++, and C++0x
