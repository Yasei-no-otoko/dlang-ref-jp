Ddoc

$(SPEC_S 埋め込みドキュメント,

$(P
D言語は既に、"契約" や "単体テスト" のコードを実際のコードに埋め込んで、
それら全ての一貫性を常に保ちやすいような設計になっていました。
ここで欠けていたのは、埋め込みドキュメントです。
普通のコメントは自動抽出してマニュアルへと整形するのには
あまり向いていませんでした。
ドキュメントをソースコードの中に埋め込むことには、重要な利点があります。
ドキュメントを２度書く必要がなくなることや、
コードとドキュメントを無矛盾に保ちやすくなることが主な利点です。
)

$(P
これに関する既存のアプローチとしては：
)

$(UL
$(LI <a href="http://www.stack.nl/~dimitri/doxygen/">Doxygen</a> は既にD言語対応です)
$(LI Java's <a href="http://java.sun.com/j2se/javadoc/">Javadoc</a>,
 は最もよく知られた例でしょう)
$(LI C#'s <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/csref/html/vcoriXMLDocumentation.asp">embedded XML</a>)
$(LI その他の <a href="http://www.python.org/sigs/doc-sig/otherlangs.html">ドキュメント化ツール</a>)
)

$(P
Dでの埋め込みドキュメントの目標は：
)

$(OL
	$(LI 抽出して変換処理せずとも、
	埋め込みドキュメントとしても綺麗に読めること)
	$(LI 自然にそして簡単に書けること。
	&lt;タグ&gt; やその他生成後のドキュメントには現れないようなごちゃごちゃした
	要素への依存は最小にする。)
	$(LI コンパイラが構文解析によって把握できる情報を
	繰り返し書く必要をなくすこと)
	$(LI 他の目的の情報抽出の邪魔にならないよう、
	HTML埋め込みには頼らないこと)
	$(LI 既存のDのコメント形式に基づいて、
	Dのコードだけを使う他のパーザは完全に独立に実装できるようにすること)
	$(LI コードと混同されることのないよう、
	見た目はコード部分とは異なって見えるようにすること)
	$(LI もし必要なら、ユーザーが Doxygen
	やその他のドキュメント抽出ツールも使えるようにすること)
)

<h2>仕様</h2>

$(P
埋め込みドキュメントコメントの形式に関する以下の仕様は、
コンパイラに対してどのように情報が伝わるのか、のみを定めています。
その情報が最終的にどのように使われるのかは実装毎に定義されます。
最終的な出力がHTMLウェブページなのか、manページなのか、あるいは
PDFファイルなのか、などは
プログラミング言語Dの規格としては定義されません。
)

<h3>処理フェーズ</h3>

$(P
埋め込みドキュメントコメントは、以下の一連のフェーズに沿って処理されます：
)

$(OL
	$(LI Lexical -
	コード中のドキュメントコメント部分が認識されます。)
	$(LI Parsing - ドキュメントコメントが、特定の宣言に関連付けられ、
	結合されます。)
	$(LI Sections - それぞれのドキュメントコメントを、
	幾つかのセクションに分解します。)
	$(LI 特殊セクションが処理されます。)
	$(LI 非特殊セクションのHighlightingが実行されます。)
	$(LI モジュール用の全てのセクションが結合されます。)
	$(LI マクロ置換が実行され、最終結果が生成されます。)
)

<h3>Lexical</h3>

$(P
埋め込みドキュメントコメントは、以下のうちいずれかの形式で書かれます：
)

$(OL
	$(LI $(D_COMMENT /** ... */) 先頭スラッシュの後に２つの *)
	$(LI $(D_COMMENT /++ ... +/) 先頭スラッシュの後に２つの +)
	$(LI $(D_COMMENT ///) ３つのスラッシュ)
)

$(P 以下の例は全て埋め込みドキュメントコメントです：)

---------------------------
/// これは一行ドキュメントコメントです。

/** これも同じく。 */

/++ これも。 +/

/**
   これは短いドキュメントコメントです。
 */

/**
 * この行の先頭の * はドキュメントコメントの一部としては扱われません。
 */

/*********************************
   /**の後に続いている余分な*は、
   ドキュメントコメントの一部ではありません。
 */

/++
   これは短いドキュメントコメントです。
 +/

/++
 + この行の先頭の + はドキュメントコメントの一部としては扱われません。
 +/

/+++++++++++++++++++++++++++++++++
   余分な+は、
   ドキュメントコメントの一部ではありません。
 +/

/**************** 閉じ*も一部ではありません *****************/
---------------------------

$(P
コメント開始部、終了部及び左マージンの余分な * や + は、
無視され、
埋め込みドキュメントとしては処理されません。
以上の形式のどれにも沿っていないコメントは、ドキュメントコメントではありません。
)

<h3>Parsing</h3>

$(P
ドキュメントコメントはそれぞれ、宣言へと関連付けられます。
ドキュメントコメントと同じ行に空白文字しか残っていない場合、
次に出現する
宣言を参照するものとします。
同じ宣言に適用されるドキュメントコメントが複数あるときは、
それらは結合されます。
宣言に関連付いていないドキュメントコメントは無視されます。
$(I ModuleDeclaration) の前にあるドキュメントコメントは、
モジュール全体に適用されます。
ドキュメントコメントが宣言と同じ行でその右側に出現するときは、
その宣言に適用されます。
)

$(P
宣言に対するドキュメントコメントが
$(D ditto) という識別子のみからなる場合、
同じスコープにある直前のドキュメントコメントが、
その宣言に対しても同様に適用されます。
)

$(P
宣言に関連するドキュメントコメントがひとつも無い場合、
その宣言はドキュメントに出力されない可能性があります。確実に出力したい場合、
空のドキュメントコメントを付けておく必要があります。
)

------------------------------------
int a;  /// aに関するドキュメント; bはドキュメントなし
int b;

/** cとdに関するドキュメント */
/** さらにcとdに関するドキュメント */
int c;
/** ditto */
int d;

/** eとfに関するドキュメント */ int e;
int f;	/// ditto

/** gに関するドキュメント */
int g; /// さらにgに関するドキュメント

/// C と D に関するドキュメント
class C {
  int x; /// C.x に関するドキュメント

  /** C.y と C.z に関するドキュメント */
  int y;
  int z; /// ditto
}

/// ditto
class D { }
------------------------------------

<h3>Sections</h3>

$(P
ドキュメントコメントは、一連の $(I Section) で構成されています。
$(I Section) とは、行の最初の非空白文字であって、直後に
':' が続いている名前のことを言います。この名前がセクション名です。
セクション名については、大文字小文字が区別されません。
)

<h4>Summary</h4>

$(P
最初のセクションは $(I Summary) です。セクション名はありません。
空行かセクション名が現れるまでの最初の段落です。
Summaryがどれだけ長くても仕様上は問題ありませんが、出来る限り一行に収めるべきです。
$(I Summary) セクションは省略可能です。
)

<h4>Description</h4>

$(P
次の無名のセクションが、$(I Description) です。
$(I Summary) の後、セクション名かコメント終端が現れるまでの
全ての段落がこのセクションに含まれます。
)

$(P
$(I Description) セクションは省略可能ですが、
$(I Summary) セクションなしに $(I Description) を書くことはできません。
)

------------------------------------
/***********************************
 * myfunc 関数の短い要旨で、
 * ここがsummaryセクションになります。
 *
 * 概要の説明の第一段落です。
 *
 * 概要の説明の
 * 第二段落です。ここまでdescriptionセクション。
 */

void myfunc() { }
------------------------------------

$(P
無名セクション $(I Summary) と $(I Description) の後に、名前つきセクションが続きます。
)

<h3>標準セクション</h3>

$(P
一貫性やわかりやすさのために、幾つか標準的なセクションが規定されています。
どれも、必須の要素ではありません。
)

<dl>

<dt> $(B Authors:)
<dd> コードを書いた人のリスト
------------------------------------
/**
 * Authors: Melvin D. Nerd, melvin@mailinator.com
 */
------------------------------------

<dt> $(B Bugs:)
<dd> 既知のバグのリスト
------------------------------------
/**
 * Bugs: 負の数では動作しない
 */
------------------------------------

<dt> $(B Date:)
<dd> 現在のバージョンの更新日時。
     std.date で解析可能な形式で記述する

------------------------------------
/**
 * Date: March 14, 2003
 */
------------------------------------

<dt> $(B Deprecated:)
<dd> 非推奨な宣言について、
    代替手段についてなどの説明

------------------------------------
/**
 * Deprecated: 関数 bar() に置き換えられました
 */

deprecated void foo() { ... }
------------------------------------

<dt> $(B Examples:)
<dd> 使い方の例
------------------------------------
/**
 * Examples:
 * --------------------
 * writefln("3"); // 標準出力に '3' を表示
 * --------------------
 */
------------------------------------

<dt> $(B History:)
<dd> 更新履歴
------------------------------------
/**
 * History:
 *	V1 最初のバージョン
 *
 *	V2 機能Xを追加
 */
------------------------------------

<dt> $(B License:)
<dd> 著作権のあるコードに関して、ライセンスの情報
------------------------------------
/**
 * License: どんな用途にもご自由にお使いください
 */

void bar() { ... }
------------------------------------

<dt> $(B Returns:)
<dd> 関数の返値に関する説明。
     $(B void) を返す場合、無駄にそうドキュメントを書かないこと
------------------------------------
/**
 * ファイルを読み込みます
 * Returns: ファイルの内容
 */

void[] readFile(char[] filename) { ... }
------------------------------------

<dt> $(B See_Also:)
<dd> 関連する識別子や、URLのリスト
------------------------------------
/**
 * See_Also:
 *    foo, bar, http://www.digitalmars.com/d/phobos/index.html
 */
------------------------------------

<dt> $(B Standards:)
<dd> 何らかの標準規格に準拠した宣言の場合、
そのことに関する説明はここに
------------------------------------
/**
 * Standards: DSPEC-1234 準拠
 */
------------------------------------

<dt> $(B Throws:)
<dd> 送出される可能性のある例外と、例外が起きる場合のリスト
------------------------------------
/**
 * ファイルに書き込みます
 * Throws: 失敗時, WriteException
 */

void writeFile(char[] filename) { ... }
------------------------------------

<dt> $(B Version:)
<dd> 現在のバージョン番号を記述します
------------------------------------
/**
 * Version: 1.6a
 */
------------------------------------
</dl>

<h3>特殊セクション</h3>

$(P
幾つかのセクションには、特別な意味と構文が定義されています。
)

<dl>

<dt> $(B Copyright:)
<dd> 著作権表示のセクションです。モジュール宣言のドキュメントとして使われると、
	このセクションの内容が COPYRIGHT マクロにセットされます。
	Copyrightセクションは、
	モジュール宣言に対して使われたときのみ特別な動作になります。

------------------------------------
/** Copyright: Public Domain */

module foo;
------------------------------------

<dt> $(B Params:)
<dd> 関数の引数は、Params セクションにリストアップすることでドキュメント化します。
     変数名、そして '=' と続く行が、新しい引数の説明の開始となります。
     説明は
     複数行にまたがっても構いません。

------------------------
/***********************************
 * foo はこれこれの動作をします。
 * Params:
 *	x =	は、これに使われます。
 *		あれではありません。
 *	y =	は、あれに使われます。
 */

void foo(int x, int y)
{
}
-------------------------

<dt> $(B Macros:) </dt>
<dd> マクロセクションは、$(B Params:) セクションと同じ構文で書かれます。
     つまり、$(I NAME)=$(I value) の組が複数並ぶことになります。
     $(I NAME) がマクロ名で、$(I value)
     が置換先の文字列です。
------------------------------------
/**
 * Macros:
 *	FOO =	本日は
 *		晴天なり
 *	BAR =	bar
 *	MAGENTA =   &lt;font color=magenta&gt;$0&lt;/font&gt;
 */
------------------------------------
</dl>

<h2>Highlighting</h2>

<h4>埋め込みコメント</h4>

$(P
	ドキュメントコメントの中に、
	&#36;(DDOC_COMMENT comment text) 構文でコメントを入れることができます。
	このコメントをネストすることはできません。
)

<h4>埋め込みコード</h4>

$(P
	D のコードは、コードセクションを区切る
	三個以上のハイフンを含む行によって埋め込むことができます。
)

------------------------------------
/++
 + 我々の関数
 +
 + Example:
 + ---
 + import std.stdio;
 +
 + void foo()
 + {
 +     writefln("foo!");  /* 文字列を表示 */
 + }
 + ---
 +/
------------------------------------

$(P
	コードセクションの中で $(D_COMMENT /++ ... +/)
	を使えるようにするため、ここではドキュメント化コメントとして
	$(D_COMMENT /* ... */) 形式を使いました。
)

<h4>埋め込みHTML</h4>

$(P
ドキュメント化コメントの中にHTMLを埋め込むことも可能で、
HTML出力の際には変更されずそのまま出力されます。
しかし、必ずしも出力形式がHTMLであるとは限らないため、
実際には
これは使わないでおくべきでしょう。
)

------------------------------------
/**
 * HTML 埋め込みの例:
 *
 * <ol>
 *   <li><a href="http://www.digitalmars.com">Digital Mars</a></li>
 *   <li><a href="http://www.classicempire.com">Empire</a></li>
 * </ol>
 */
------------------------------------

<h4>強調</h4>

$(P
ドキュメントコメント内の識別子で、関数の引数や、
その他関連する宣言のスコープで定義されている名前となっているものは
出力中で強調表示されます。
強調は、斜体や太字、ハイパーリンクなどで表現されます。
どのように強調されるかは、それが関数引数なのか、型なのか、
あるいはDの予約語なのか、などに依存します。
意図しない強調表示を避けるためには、単語の直前に下線 (_) をつけます。
この下線は出力時に自動的に除去されます。
)

<h4>文字実体</h4>

$(P
	ドキュメントプロセッサにとって特別な意味を持つ文字が幾つか存在します。
	混乱を避けるには、
	それらの文字を対応するエンティティに置き換えるのがベストでしょう：
)

	$(TABLE2 文字とエンティティ,
	$(TR $(TH 文字) $(TH エンティティ))
	$(TR $(TD &lt;  )$(TD &amp;lt; ))
	$(TR $(TD &gt;  )$(TD &amp;gt; ))
	$(TR $(TD &amp; )$(TD &amp;amp; ))
	)

$(P
	コードセクションの中でこの置換をしておく必要はありません。
	あるいは特殊文字の直後に#や英数字が来ない場合も不要です。
)

<h4>ドキュメント生成されない場合<h4>

$(P
	たとえドキュメントコメントがあったとしても、
	以下の要素についてはドキュメントは生成されません。
)

	$(UL
	$(LI invariant 不変条件)
$(V2	$(LI Postblits))
	$(LI デストラクタ)
	$(LI 静的コンストラクタと静的デストラクタ)
	$(LI Class info, type info, module info)
	)

<h2>マクロ</h2>

$(P
	ドキュメント化コメントの処理系は、
	単純なマクロテキストのプリプロセッサを備えています。
	&#36;($(I NAME)) という形がセクションの文章に現れると、
	対応するマクロ $(I NAME)
	の指す文字列へと置換されます。
	置換後の文字列は再帰的に、さらなるマクロ展開のために走査されます。
	再帰的に
	同じマクロが同じ引数で出現した場合は、
	空のテキストへと置換されます。
	置換テキストの境界をまたぐようなマクロ起動は、
	展開されません。
	マクロ名が未定義の時は、
	空文字列へと置換されます。
	マクロ展開されずに &#36;(NAME) という文字列そのものを出力したい場合は、
	$ の代わりに &amp;#36; と記述してください。
)

$(P
	マクロは引数を取ることもできます。マクロ名の後ろから
	閉じ括弧 $(SINGLEQUOTE $(RPAREN)) までの全ての文字列が &#36;0 引数です。
	置換文字列の中の &#36;0 が、
	引数文字列に置き換えられます。
	引数の中にカンマがあると、&#36;1 が最初のカンマまでの文字列を表し、
	&#36;2 が最初のカンマから２番目のカンマまでを表し…、
	と &#36;9 まで用意されています。
	&#36;+ は、最初のカンマから閉じ $(SINGLEQUOTE $(RPAREN)) までの文字列です。
	引数文字列内にはネストした括弧や、"" や '' による文字列、
	&lt;!-- ... --&gt; コメントやタグも含むことができます。
	対応していない括弧が必要な場合は、
	( の代わりに文字実体 &amp;#40;、) の代わりに &amp;#41; を使用します。
)

$(P
	マクロ定義は、
	以下の位置から以下の順番で取得されます：
)

	$(OL
	$(LI 定義済みマクロ)
	$(LI $(DPLLINK dmd-windows.html#sc_ini, sc.ini) や
	$(DPLLINK dmd-linux.html#dmd_conf, dmd.conf) の DDOCFILE 設定での定義)
	$(LI コマンドラインで指定された *.ddoc ファイルでの定義)
	$(LI Ddoc によって生成される実行時定義)
	$(LI Macros: セクションでの定義)
	)

$(P
	マクロの再定義によって、前に定義された同名のマクロを置き換えることができます。
	つまり、様々な定義元から取得された一連のマクロ定義は階層構造を
	なすことになります。
)

$(P
	"D_" や "DDOC_" で始まるマクロ名は予約されています。
)

<h3>定義済みマクロ</h3>

$(P
	これらは、Ddoc内部に組み込まれ、
	Ddocが整形とハイライト処理を行うために必要な最小の定義セット
	となっているものです。
	定義は、簡単なHTMLを出力するものとなっています。
)

$(DDOCCODE
B =     &lt;b&gt;&#36;0&lt;/b&gt;
I =     &lt;i&gt;&#36;0&lt;/i&gt;
U =     &lt;u&gt;&#36;0&lt;/u&gt;
P =     &lt;p&gt;&#36;0&lt;/p&gt;
DL =    &lt;dl&gt;&#36;0&lt;/dl&gt;
DT =    &lt;dt&gt;&#36;0&lt;/dt&gt;
DD =    &lt;dd&gt;&#36;0&lt;/dd&gt;
TABLE = &lt;table&gt;&#36;0&lt;/table&gt;
TR =    &lt;tr&gt;&#36;0&lt;/tr&gt;
TH =    &lt;th&gt;&#36;0&lt;/th&gt;
TD =    &lt;td&gt;&#36;0&lt;/td&gt;
OL =    &lt;ol&gt;&#36;0&lt;/ol&gt;
UL =    &lt;ul&gt;&#36;0&lt;/ul&gt;
LI =    &lt;li&gt;&#36;0&lt;/li&gt;
BIG =   &lt;big&gt;&#36;0&lt;/big&gt;
SMALL = &lt;small&gt;&#36;0&lt;/small&gt;
BR =    &lt;br&gt;
LINK =  &lt;a href="&#36;0"&gt;&#36;0&lt;/a&gt;
LINK2 = &lt;a href="&#36;1"&gt;&#36;+&lt;/a&gt;
LPAREN= $(LPAREN)
RPAREN= $(RPAREN)

RED =   &lt;font color=red&gt;&#36;0&lt;/font&gt;
BLUE =  &lt;font color=blue&gt;&#36;0&lt;/font&gt;
GREEN = &lt;font color=green&gt;&#36;0&lt;/font&gt;
YELLOW =&lt;font color=yellow&gt;&#36;0&lt;/font&gt;
BLACK = &lt;font color=black&gt;&#36;0&lt;/font&gt;
WHITE = &lt;font color=white&gt;&#36;0&lt;/font&gt;

D_CODE = &lt;pre class="d_code"&gt;&#36;0&lt;/pre&gt;
D_COMMENT = &#36;(GREEN &#36;0)
D_STRING  = &#36;(RED &#36;0)
D_KEYWORD = &#36;(BLUE &#36;0)
D_PSYMBOL = &#36;(U &#36;0)
D_PARAM   = &#36;(I &#36;0)

DDOC = &lt;html&gt;&lt;head&gt;
       &lt;META http-equiv="content-type" content="text/html; charset=utf-8"&gt;
       &lt;title&gt;&#36;(TITLE)&lt;/title&gt;
       &lt;/head&gt;&lt;body&gt;
       &lt;h1&gt;&#36;(TITLE)&lt;/h1&gt;
       &#36;(BODY)
       &lt;/body&gt;&lt;/html&gt;

DDOC_COMMENT   = &lt;!-- &#36;0 --&gt;
DDOC_DECL      = &#36;(DT &#36;(BIG &#36;0))
DDOC_DECL_DD   = &#36;(DD &#36;0)
DDOC_DITTO     = &#36;(BR)&#36;0
DDOC_SECTIONS  = &#36;0
DDOC_SUMMARY   = &#36;0&#36;(BR)&#36;(BR)
DDOC_DESCRIPTION = &#36;0&#36;(BR)&#36;(BR)
DDOC_AUTHORS   = &#36;(B Authors:)&#36;(BR)
		&#36;0&#36;(BR)&#36;(BR)
DDOC_BUGS      = &#36;(RED BUGS:)&#36;(BR)
		&#36;0&#36;(BR)&#36;(BR)
DDOC_COPYRIGHT = &#36;(B Copyright:)&#36;(BR)
		&#36;0&#36;(BR)&#36;(BR)
DDOC_DATE      = &#36;(B Date:)&#36;(BR)
		&#36;0&#36;(BR)&#36;(BR)
DDOC_DEPRECATED = &#36;(RED Deprecated:)&#36;(BR)
		&#36;0&#36;(BR)&#36;(BR)
DDOC_EXAMPLES  = &#36;(B Examples:)&#36;(BR)
		&#36;0&#36;(BR)&#36;(BR)
DDOC_HISTORY   = &#36;(B History:)&#36;(BR)
		&#36;0&#36;(BR)&#36;(BR)
DDOC_LICENSE   = &#36;(B License:)&#36;(BR)
		&#36;0&#36;(BR)&#36;(BR)
DDOC_RETURNS   = &#36;(B Returns:)&#36;(BR)
		&#36;0&#36;(BR)&#36;(BR)
DDOC_SEE_ALSO  = &#36;(B See Also:)&#36;(BR)
		&#36;0&#36;(BR)&#36;(BR)
DDOC_STANDARDS = &#36;(B Standards:)&#36;(BR)
		&#36;0&#36;(BR)&#36;(BR)
DDOC_THROWS    = &#36;(B Throws:)&#36;(BR)
		&#36;0&#36;(BR)&#36;(BR)
DDOC_VERSION   = &#36;(B Version:)&#36;(BR)
		&#36;0&#36;(BR)&#36;(BR)
DDOC_SECTION_H = &#36;(B &#36;0)&#36;(BR)&#36;(BR)
DDOC_SECTION   = &#36;0&#36;(BR)&#36;(BR)
DDOC_MEMBERS   = &#36;(DL &#36;0)
DDOC_MODULE_MEMBERS   = &#36;(DDOC_MEMBERS &#36;0)
DDOC_CLASS_MEMBERS    = &#36;(DDOC_MEMBERS &#36;0)
DDOC_STRUCT_MEMBERS   = &#36;(DDOC_MEMBERS &#36;0)
DDOC_ENUM_MEMBERS     = &#36;(DDOC_MEMBERS &#36;0)
DDOC_TEMPLATE_MEMBERS = &#36;(DDOC_MEMBERS &#36;0)
DDOC_PARAMS    = &#36;(B Params:)&#36;(BR)\n&#36;(TABLE &#36;0)&#36;(BR)
DDOC_PARAM_ROW = &#36;(TR &#36;0)
DDOC_PARAM_ID  = &#36;(TD &#36;0)
DDOC_PARAM_DESC  = &#36;(TD &#36;0)
DDOC_BLANKLINE = &#36;(BR)&#36;(BR)

DDOC_PSYMBOL = &#36;(U &#36;0)
DDOC_KEYWORD = &#36;(B &#36;0)
DDOC_PARAM   = &#36;(I &#36;0)
)

$(P
	Ddoc は HTML コードを生成するわけではありません。Ddoc
	は基本書式化マクロを生成し、(その定義済み形式に従って)
	HTMLへの展開を行います。
	HTML以外の形式での出力が必要な場合、
	以下のマクロを再定義する必要があります。
)

	$(TABLE2 基本書式化マクロ,
	$(TR $(TD $(B B)) $(TD 引数を太字にする))
	$(TR $(TD $(B I)) $(TD 引数を斜体にする))
	$(TR $(TD $(B U)) $(TD 引数に下線をひく))
	$(TR $(TD $(B P)) $(TD 引数をひとつの段落とする))
	$(TR $(TD $(B DL)) $(TD 引数は定義リスト))
	$(TR $(TD $(B DT)) $(TD 引数は定義リスト内の定義名))
	$(TR $(TD $(B DD)) $(TD 引数は定義リスト内の定義説明部分))
	$(TR $(TD $(B TABLE)) $(TD 引数は表))
	$(TR $(TD $(B TR)) $(TD 引数は表の列))
	$(TR $(TD $(B TH)) $(TD 引数は表の列のヘッダ項目))
	$(TR $(TD $(B TD)) $(TD 引数は表の列のデータ項目))
	$(TR $(TD $(B OL)) $(TD 引数は順序つきリスト))
	$(TR $(TD $(B UL)) $(TD 引数は順序なしリスト))
	$(TR $(TD $(B LI)) $(TD 引数はリストの要素))
	$(TR $(TD $(B BIG)) $(TD 引数を一回り大きく表示))
	$(TR $(TD $(B SMALL)) $(TD 引数を一回り小さく表示))
	$(TR $(TD $(B BR)) $(TD 改行))
	$(TR $(TD $(B LINK)) $(TD 引数をクリック可能なリンクとする))
	$(TR $(TD $(B LINK2)) $(TD 引数をクリック可能なリンクとする。第一引数がアドレス))
	$(TR $(TD $(B RED)) $(TD 引数を赤く表示))
	$(TR $(TD $(B BLUE)) $(TD 引数を青く表示))
	$(TR $(TD $(B GREEN)) $(TD 引数を緑に表示))
	$(TR $(TD $(B YELLOW)) $(TD 引数を黄色く表示))
	$(TR $(TD $(B BLACK)) $(TD 引数を黒く表示))
	$(TR $(TD $(B WHITE)) $(TD 引数を白く表示))
	$(TR $(TD $(B D_CODE)) $(TD 引数をDソースコードとして処理))
	$(TR $(TD $(B DDOC)) $(TD 出力全体のテンプレート))
	)

$(P
	$(B DDOC) は、生成されたテキスト全体（Ddocの生成するマクロ $(B BODY)
	で参照できます）が挿入される雛形になるという意味で、特殊なマクロです。
	例えばスタイルシートを使うには、
	$(B DDOC) を次のように再定義します:
)

$(DDOCCODE
DDOC =	&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;
	&lt;html&gt;&lt;head&gt;
	&lt;META http-equiv="content-type" content="text/html; charset=utf-8"&gt;
	&lt;title&gt;&#36;(TITLE)&lt;/title&gt;
	&lt;link rel="stylesheet" type="text/css" href="$(B style.css)"&gt;
	&lt;/head&gt;&lt;body&gt;
	&lt;h1&gt;&#36;(TITLE)&lt;/h1&gt;
	&#36;(BODY)
	&lt;/body&gt;&lt;/html&gt;
)

$(P
	$(B DDOC_COMMENT)
	は出力ファイルにコメントを挿入するのに使えます。
)

$(P
	Dのソースコードのハイライト表示は以下のマクロで行われます：
)

	$(TABLE2 D ソースコード整形マクロ,
	$(TR $(TD $(B D_COMMENT)) $(TD コメントのハイライト))
	$(TR $(TD $(B D_STRING)) $(TD 文字列リテラルのハイライト))
	$(TR $(TD $(B D_KEYWORD)) $(TD 予約語のハイライト))
	$(TR $(TD $(B D_PSYMBOL)) $(TD 現在の宣言名のハイライト))
	$(TR $(TD $(B D_PARAM)) $(TD 現在の関数引数のハイライト))
	)

$(P
	ハイライト表示マクロは $(B DDOC_) で始まります。
	これらによって表示の個々のパートの整形を制御します。
)

	$(TABLE2 Ddoc セクション整形マクロ,
	$(TR $(TD $(B DDOC_DECL)) $(TD 宣言のハイライト))
	$(TR $(TD $(B DDOC_DECL_DD)) $(TD 宣言の説明部のハイライト))
	$(TR $(TD $(B DDOC_DITTO)) $(TD ditto 宣言のハイライト))
	$(TR $(TD $(B DDOC_SECTIONS)) $(TD 全セクションのハイライト))
	$(TR $(TD $(B DDOC_SUMMARY)) $(TD Summaryセクションのハイライト))
	$(TR $(TD $(B DDOC_DESCRIPTION)) $(TD Descriptionセクションのハイライト))
	$(TR $(TD $(B DDOC_AUTHORS .. DDOC_VERSION)) $(TD それぞれ対応する標準セクションのハイライト))
	$(TR $(TD $(B DDOC_SECTION_H)) $(TD 非標準セクションのセクション名のハイライト))
	$(TR $(TD $(B DDOC_SECTION)) $(TD 非標準セクションの内容のハイライト))
	$(TR $(TD $(B DDOC_MEMBERS)) $(TD クラスや構造体などのメンバのデフォルトのハイライト))
	$(TR $(TD $(B DDOC_MODULE_MEMBERS)) $(TD モジュールメンバのハイライト))
	$(TR $(TD $(B DDOC_CLASS_MEMBERS)) $(TD クラスメンバのハイライト))
	$(TR $(TD $(B DDOC_STRUCT_MEMBERS)) $(TD 構造体メンバのハイライト))
	$(TR $(TD $(B DDOC_ENUM_MEMBERS)) $(TD 列挙体メンバのハイライト))
	$(TR $(TD $(B DDOC_TEMPLATE_MEMBERS)) $(TD テンプレートメンバのハイライト))
	$(TR $(TD $(B DDOC_PARAMS)) $(TD 関数引数セクションのハイライト))
	$(TR $(TD $(B DDOC_PARAM_ROW)) $(TD name=value 関数引数のハイライト))
	$(TR $(TD $(B DDOC_PARAM_ID)) $(TD 引数名 name のハイライト))
	$(TR $(TD $(B DDOC_PARAM_DESC)) $(TD 引数説明 value のハイライト))
	$(TR $(TD $(B DDOC_PSYMBOL)) $(TD 特定のセクションから参照されている宣言名のハイライト))
	$(TR $(TD $(B DDOC_KEYWORD)) $(TD D予約語のハイライト))
	$(TR $(TD $(B DDOC_PARAM)) $(TD 関数引数のハイライト))
	$(TR $(TD $(B DDOC_BLANKLINE)) $(TD 空行の挿入))
	)

$(P
	例えば、$(B DDOC_SUMMARY) を次のように再定義できます:
)

$(DDOCCODE
DDOC_SUMMARY = &#36;(GREEN &#36;0)
)

$(P
	これで、Summaryセクションが全て緑色になります。
)

<h3>$(DPLLINK dmd-windows.html#sc_ini, $(D sc.ini))/$(DPLLINK dmd-linux.html#dmd_conf, $(D dmd.conf)) の DDOCFILE によるマクロ定義</h3>

$(P
	マクロ定義のテキストファイルを作っておくことができ、
	$(D sc.ini) や $(D dmd.conf) で指定可能です：
)

$(DDOCCODE
DDOCFILE=myproject.ddoc
)

<h3>コマンドライン指定による .ddoc ファイルからのマクロ定義</h3>

$(P
	拡張子 .ddoc を持つファイルが DMD のコマンドラインに渡ると、
	順番に読み込まれ処理されます。
)

<h3>Ddoc の生成するマクロ定義</h3>

	$(TABLE2 生成されるマクロ定義,
	$(TR
	$(TH マクロ名)
	$(TH 内容)
	)
	$(TR
	$(TD $(B BODY))
	$(TD ドキュメントテキスト本文が入ります)
	)
	$(TR
	$(TD $(B TITLE))
	$(TD モジュール名が入ります)
	)
	$(TR
	$(TD $(B DATETIME))
	$(TD 現在の日時が入ります)
	)
	$(TR
	$(TD $(B YEAR))
	$(TD 現在の年が入ります)
	)
	$(TR
	$(TD $(B COPYRIGHT))
	$(TD モジュールコメントの $(B Copyright:)
	セクションの内容が入ります)
	)
	$(TR
	$(TD $(B DOCFILENAME))
	$(TD 生成されるファイルの名前が入ります)
	)
	$(TR
	$(TD $(B SRCFILENAME))
	$(TD ドキュメント生成の元となった
	ソースファイルの名前が入ります。)
	)
	)

<h2>他のドキュメント生成に Ddoc を使う</h2>

$(P
	当初は Ddoc は、埋め込みコメントからのドキュメント生成用に作られました。
	しかしながら、
	その他の一般的なドキュメントの処理にも使用できます。
	埋め込みコメント以外でも利用する利点としては、
	Ddoc のマクロ機能や、
	ソースコードの構文ハイライト機能があります。
)

$(P
	.d ソースファイルが Ddoc という文字列で開始している場合、
	Dのソースコードではなく一般的なドキュメントファイルとして扱われます。
	"Ddoc" 文字列の直後から、ファイル終端か "Macros:"
	セクションまでがドキュメントとなります。
	テキストには、---行 で囲まれた埋め込みソースコード部分以外は、
	自動的構文ハイライト処理は行われません。
	マクロ処理だけが実行されます。
)

$(P
	このページを含め、
	Dのドキュメントそのものも、多くはこのようにして生成されています。
	そのようなドキュメントには、一番下に Ddoc
	で生成された旨を表示してあります。
)

<h2>参考文献</h2>

$(P
	$(LINK2 http://www.dsource.org/projects/helix/wiki/CandyDoc, CandyDoc)
	は、マクロとスタイルシートによって
	Ddoc
	の出力をカスタマイズする非常に良い例です。
)

)

Macros:
	TITLE=埋め込みドキュメント
	WIKI=Ddoc
	CATEGORY_SPEC=$0
	RPAREN=)
