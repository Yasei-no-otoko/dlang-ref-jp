Ddoc

$(SPEC_S 特性,

	$(P 特性 (trait) は、コンパイル時に、
	プログラムからコンパイラの内部情報を取得できるようにする言語拡張です。
	コンパイル時リフレクション
	と呼ばれることもあります。
	構文は(pragmaに似た)簡単に拡張可能な形式で、
	新しい機能が必要になったら
	すぐに追加できるようになっています。
	)

$(GRAMMAR
$(GNAME TraitsExpression):
    $(B __traits) $(B $(LPAREN)) $(GLINK TraitsKeyword) $(B ,) $(GLINK TraitsArguments) $(B $(RPAREN))

$(GNAME TraitsKeyword):
    $(GBLINK isAbstractClass)
    $(GBLINK isArithmetic)
    $(GBLINK isAssociativeArray)
    $(GBLINK isFinalClass)
    $(GBLINK isFloating)
    $(GBLINK isIntegral)
    $(GBLINK isScalar)
    $(GBLINK isStaticArray)
    $(GBLINK isUnsigned)
    $(GBLINK isVirtualFunction)
    $(GBLINK isVirtualMethod)
    $(GBLINK isAbstractFunction)
    $(GBLINK isFinalFunction)
    $(GBLINK isStaticFunction)
    $(GBLINK isRef)
    $(GBLINK isOut)
    $(GBLINK isLazy)
    $(GBLINK hasMember)
    $(GBLINK identifier)
    $(GBLINK parameterNames)
    $(GBLINK getMember)
    $(GBLINK getOverloads)
    $(GBLINK getVirtualFunctions)
    $(GBLINK getVirtualMethods)
    $(GBLINK parent)
    $(GBLINK classInstanceSize)
    $(GBLINK allMembers)
    $(GBLINK derivedMembers)
    $(GBLINK isSame)
    $(GBLINK compiles)

$(GNAME TraitsArguments):
    $(GLINK TraitsArgument)
    $(GLINK TraitsArgument) $(B ,) $(I TraitsArguments)

$(GNAME TraitsArgument):
    $(GLINK2 expression, AssignExpression)
    $(GLINK2 declaration, Type)
)

$(H2 $(GNAME isArithmetic))

	$(P 引数が全て、算術型であるか算術型の式である場合、
	$(B true)
	を返します。
	それ以外の場合は $(B false) を返します。
	引数が無い場合は $(B false) を返します。)

---
import std.stdio;

void main() {
  int i;
  writeln(__traits(isArithmetic, int));
  writeln(__traits(isArithmetic, i, i+1, int));
  writeln(__traits(isArithmetic));
  writeln(__traits(isArithmetic, int*));
}
---

	$(P 出力:)

$(CONSOLE
true
true
false
false
)

$(H2 $(GNAME isFloating))

	$(P $(B isArithmetic) と同じように、浮動小数点数型
	(虚数型と複素数型を含む) かどうかを判定します。)

$(H2 $(GNAME isIntegral))

	$(P $(B isArithmetic) と同じように、整数型
	(文字型を含む) かどうかを判定します。)

$(H2 $(GNAME isScalar))

	$(P $(B isArithmetic) と同じように、スカラ型
	かどうかを判定します。)

$(H2 $(GNAME isUnsigned))

	$(P $(B isArithmetic) と同じように、符号無し型
	かどうかを判定します。)

$(H2 $(GNAME isStaticArray))

	$(P $(B isArithmetic) と同じように、静的配列型
	かどうかを判定します。)

$(H2 $(GNAME isAssociativeArray))

	$(P $(B isArithmetic) と同じように、連想配列型
	かどうかを判定します。)

$(H2 $(GNAME isAbstractClass))

	$(P 引数が全て、abstractクラス型であるかabstractクラス型の式である場合、
	$(B true)
	を返します。
	それ以外の場合は $(B false) を返します。
	引数が無い場合は $(B false) を返します。)

---
import std.stdio;

abstract class C { int foo(); }

void main() {
  C c;
  writeln(__traits(isAbstractClass, C));
  writeln(__traits(isAbstractClass, c, C));
  writeln(__traits(isAbstractClass));
  writeln(__traits(isAbstractClass, int*));
}
---

	$(P 出力:)

$(CONSOLE
true
true
false
false
)

$(H2 $(GNAME isFinalClass))

	$(P $(B isAbstractClass) と同じように、finalクラス
	かどうかを判定します。)

$(H2 $(GNAME isVirtualFunction))

	$(P $(GLINK isVirtualMethod) と同様ですが、
	他の関数のオーバーライドでない final 関数に対しては true を返します。
	)

$(H2 $(GNAME isVirtualMethod))

	$(P 引数を１つ取ります。その引数が仮想関数なら
	$(B true)、そうでなければ $(B false) を返します。
	他の関数のオーバーライドでない final 関数に対しては false を返します。
	)

---
import std.stdio;

struct S {
  void bar() { }
}

class C {
  void bar() { }
}

void main() {
  writeln(__traits(isVirtualMethod, C.bar));  // true
  writeln(__traits(isVirtualMethod, S.bar));  // false
}
---

$(H2 $(GNAME isAbstractFunction))

	$(P 引数を１つ取ります。その引数がabstract関数なら
	$(B true)、そうでなければ $(B false) を返します。
	)

---
import std.stdio;

struct S {
  void bar() { }
}

class C {
  void bar() { }
}

class AC {
  abstract void foo();
}

void main() {
  writeln(__traits(isAbstractFunction, C.bar));   // false
  writeln(__traits(isAbstractFunction, S.bar));   // false
  writeln(__traits(isAbstractFunction, AC.foo));  // true
}
---

$(H2 $(GNAME isFinalFunction))

	$(P 引数を１つ取ります。その引数がfinal関数なら
	$(B true)、そうでなければ $(B false) を返します。
	)

---
import std.stdio;

struct S {
  void bar() { }
}

class C {
  void bar() { }
  final void foo();
}

final class FC {
  void foo();
}

void main() {
  writeln(__traits(isFinalFunction, C.bar));	  // false
  writeln(__traits(isFinalFunction, S.bar));	  // false
  writeln(__traits(isFinalFunction, C.foo));	  // true
  writeln(__traits(isFinalFunction, FC.foo));  // true
}
---

$(H2 $(GNAME isStaticFunction))

	$(P 引数を一つ取り、それが静的関数ならば、
	つまり context pointer を持たないならば
	$(B true)、そうでなければ $(B false) を返します。
	)


$(H2 $(GNAME isRef), $(GNAME isOut), $(GNAME isLazy))

	$(P 引数を１つとります。引数が宣言であった場合、
	それぞれ $(D_KEYWORD ref), $(D_KEYWORD out),
	$(D_KEYWORD lazy) ならば $(B true) を返し、それ以外では $(B false) になります。
	)

---
void fooref(ref int x) {
  static assert(__traits(isRef, x));
  static assert(!__traits(isOut, x));
  static assert(!__traits(isLazy, x));
}

void fooout(out int x) {
  static assert(!__traits(isRef, x));
  static assert(__traits(isOut, x));
  static assert(!__traits(isLazy, x));
}

void foolazy(lazy int x) {
  static assert(!__traits(isRef, x));
  static assert(!__traits(isOut, x));
  static assert(__traits(isLazy, x));
}
---

$(H2 $(GNAME hasMember))

	$(P 第一引数には、メンバがあるか調べたい型か、
	メンバがあるか調べたい型を持つ式を指定します。
	第二引数は文字列です。
	その文字列が指定された型の有効なプロパティだった場合
	$(B true)、そうでなければ $(B false) を返します。
	)

---
import std.stdio;

struct S {
  int m;
}

void main() {
  S s;

  writeln(__traits(hasMember, S, "m")); // true
  writeln(__traits(hasMember, s, "m")); // true
  writeln(__traits(hasMember, S, "y")); // false
  writeln(__traits(hasMember, int, "sizeof")); // true
}
---

$(H2 $(GNAME identifier))

	$(P シンボルを１つ引数としてとり、
	そのシンボルの識別子を文字列として返します。
	)

$(H2 $(GNAME parameterNames))

	$(P 引数を一つ、関数を受け取ります。
	関数の仮引数名を文字列リテラルとして格納した配列を返します。
	)

---
import std.stdio;

void foo(int x, int y) {}

void main() {
  foreach (i; __traits(parameterNames, foo)) {
    writeln(i);
  }
}
---

	$(P 以下のように表示されます:)

$(CONSOLE
x
y
)


$(H2 $(GNAME getMember))

	$(P 二つ引数を取り、
	第二引数は文字列です。
	"第一引数 . 第二引数を識別子化したもの"
	という形の式を返します。
	)

---
import std.stdio;

struct S {
  int mx;
  static int my;
}

void main() {
  S s;

  __traits(getMember, s, "mx") = 1;  // s.mx=1; と同じ
  writeln(__traits(getMember, s, "m" ~ "x")); // 1

  __traits(getMember, S, "mx") = 1;  // エラー、S.mx のための this がない
  __traits(getMember, S, "my") = 2;  // ok
}
---

$(H2 $(GNAME getOverloads))

	$(P 第一引数にはクラス型か、
	クラス型を持つ式を指定します。
	第二引数には、
	そのクラスの関数名にマッチする文字列を指定します。
	結果は、その名前で定義されている関数全ての配列です。
	)

---
import std.stdio;

class D {
  this() { }
  ~this() { }
  void foo() { }
  int foo(int) { return 2; }
}

void main() {
  D d = new D();

  foreach (t; __traits(getOverloads, D, "foo"))
    writeln(typeid(typeof(t)));

  alias typeof(__traits(getOverloads, D, "foo")) b;
  foreach (t; b)
    writeln(typeid(t));

  auto i = __traits(getOverloads, d, "foo")[1](1);
  writeln(i);
}
---

	$(P 出力:)

$(CONSOLE
void()
int()
void()
int()
2
)

$(H2 $(GNAME getVirtualFunctions))

	$(P $(GLINK getVirtualMethods) と同様ですが、
	他の関数のオーバーライドでない final 関数も含まれます。
	)

$(H2 $(GNAME getVirtualMethods))

	$(P 第一引数にはクラス型か、
	クラス型を持つ式を指定します。
	第二引数には、
	そのクラスの関数名にマッチする文字列を指定します。
	結果は、その名前で定義されている仮想関数全ての配列です。
	他の関数のオーバーライドでない final 関数が含まれません。
	)

---
import std.stdio;

class D {
  this() { }
  ~this() { }
  void foo() { }
  int foo(int) { return 2; }
}

void main() {
  D d = new D();

  foreach (t; __traits(getVirtualMethods, D, "foo"))
    writeln(typeid(typeof(t)));

  alias typeof(__traits(getVirtualMethods, D, "foo")) b;
  foreach (t; b)
    writeln(typeid(t));

  auto i = __traits(getVirtualMethods, d, "foo")[1](1);
  writeln(i);
}
---

	$(P 出力:)

$(CONSOLE
void()
int()
void()
int()
2
)

$(H2 $(GNAME parent))

	$(P シンボル一つに評価される引数を一つとり、
	その親シンボルを返します。
	)

$(H2 $(GNAME classInstanceSize))

	$(P クラス型かクラス型を持つ式一つを
	引数に取ります。
	返値は
	$(CODE size_t) 型で、
	値はそのクラスのインスタンスが消費するバイト数になります。
	この値は、クラスの静的型に基づいたサイズです。
	多態は考慮されません。
	)

$(H2 $(GNAME allMembers))

	$(P 型か、
	型を持つ式一つを引数にとります。
	返値は文字列リテラルのタプルで、
	指定された型及びその基底クラスの全てのメンバの
	名前が格納されています。
	名前が重複することはありません。
	また、組み込みのプロパティは含まれません。
	)

---
import std.stdio;

class D {
  this() { }
  ~this() { }
  void foo() { }
  int foo(int) { return 0; }
}

void main() {
  auto b = [ __traits(allMembers, D) ];
  writeln(b);
  // ["__ctor", "__dtor", "foo", "toString", "toHash", "opCmp", "opEquals", "Monitor", "factory"]
}
---

	$(P 結果の文字列配列がどのような順番になっているかは
	特に定義されていません。)

$(H2 $(GNAME derivedMembers))

	$(P 型か、
	型を持つ式一つを引数にとります。
	返値は文字列リテラルのタプルで、
	指定された型の全てのメンバの名前が格納されています。
	名前が重複することはありません。
	基底クラスのメンバは含まれません。
	また、組み込みのプロパティは含まれません。
	)

---
import std.stdio;

class D {
  this() { }
  ~this() { }
  void foo() { }
  int foo(int) { return 0; }
}

void main() {
  auto a = [__traits(derivedMembers, D)];
  writeln(a);    // ["__ctor", "__dtor", "foo"]
}
---

	$(P 結果の文字列配列がどのような順番になっているかは
	特に定義されていません。)

$(H2 $(GNAME isSame))

	$(P 二つの引数を受け取り、同じシンボルならば $(B true)、
	そうでなければ $(B false) を返します。)

---
import std.stdio;

struct S { }

int foo();
int bar();

void main() {
  writeln(__traits(isSame, foo, foo)); // true
  writeln(__traits(isSame, foo, bar)); // false
  writeln(__traits(isSame, foo, S));   // false
  writeln(__traits(isSame, S, S));     // true
  writeln(__traits(isSame, std, S));   // false
  writeln(__traits(isSame, std, std)); // true
}
---

	$(P 二つの引数がリテラルとenumで構成された式であって、
	同じ値に評価されれば、true が返ります。)

$(H2 $(GNAME compiles))

	$(P 全ての引数がコンパイルが通る(意味的に正しい) ならば、
	$(B true) を返します。
	引数としては、
	文法的に正しいシンボル,型,式のいずれかを指定できます。
	文や宣言を引数として指定することはできません。
	)

	$(P ゼロ引数で呼び出した場合 $(B false) となります。)

---
import std.stdio;

struct S {
  static int s1;
  int s2;
}

int foo();
int bar();

void main() {
  writeln(__traits(compiles));                      // false
  writeln(__traits(compiles, foo));                 // true
  writeln(__traits(compiles, foo + 1));             // true
  writeln(__traits(compiles, &foo + 1));            // false
  writeln(__traits(compiles, typeof(1)));           // true
  writeln(__traits(compiles, S.s1));                // true
  writeln(__traits(compiles, S.s3));                // false
  writeln(__traits(compiles, 1,2,3,int,long,std));  // true
  writeln(__traits(compiles, 3[1]));                // false
  writeln(__traits(compiles, 1,2,3,int,long,3[1])); // false
}
---

	$(P 使い方としては、例えばこんなものがあります:)

	$(UL
	$(LI 複雑なテンプレート定義の内部で、
	読みやすいエラーメッセージを提供する)
	$(LI テンプレートの部分特殊化よりも
	粒度の細かい特殊化を行う)
	)

)

Macros:
	TITLE=特性
	WIKI=Traits
	CATEGORY_SPEC=$0
	GBLINK=$(LINK2 #$0, $(B $0))
	H2=<h2>$0</h2>
